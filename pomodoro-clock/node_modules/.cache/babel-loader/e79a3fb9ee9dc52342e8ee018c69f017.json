{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\pomodoro-clock\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { onUppdate } from \"./store/actions\";\nimport Pomodoro from \"./components/pomodoro\";\nimport { Timer, timeStringToSeconds } from \"./utilities\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.breakTimer = new Timer();\n    this.sessionTimer = new Timer();\n    this.state = {\n      indicator: \"session\",\n      isSession: true\n    };\n\n    this.onChangeBreakhHandler = event => {\n      const seconds = timeStringToSeconds(event.target.value);\n      this.breakTimer.setTime(seconds);\n    };\n\n    this.onChangeSessionHandler = event => {\n      const seconds = timeStringToSeconds(event.target.value);\n      this.sessionTimer.setTime(seconds);\n    };\n\n    this.onClickResetHandler = () => {\n      this.sessionTimer.reset();\n      this.breakTimer.reset();\n    };\n\n    this.onClickStopHandler = () => {\n      if (this.state.isSession) {\n        this.sessionTimer.stop();\n      } else {\n        this.breakTimer.stop();\n      }\n    };\n\n    this.onClickContinueHandler = () => {\n      if (this.state.isSession) {\n        this.sessionTimer.continue();\n      } else {\n        this.breakTimer.continue();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.breakTimer.onStart(() => {\n      this.setState({\n        indicator: \"break\",\n        isSession: false\n      });\n      console.log(\"break timer start\", \"indicator\", this.state.indicator);\n    }).onEnd(() => {\n      console.log(\"break timer end\");\n      this.sessionTimer.start();\n    }).onInterval(currentTime => {\n      this.props.onUppdateCurrentTime(currentTime);\n      console.log(\"break timer inervall: \", currentTime);\n    });\n    this.sessionTimer.onStart(() => {\n      this.setState({\n        indicator: \"session\",\n        isSession: true\n      });\n      console.log(\"session timer start\", \"indicator\", this.state.indicator);\n    }).onEnd(() => {\n      console.log(\"session timer end\");\n      this.breakTimer.start();\n    }).onInterval(currentTime => {\n      console.log(this.props.onUppdateCurrentTime(currentTime));\n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  render() {\n    return React.createElement(Pomodoro, {\n      onChangeBreakLength: event => this.onChangeBreakhHandler(event),\n      onChangeSessionLength: event => this.onChangeSessionHandler(event),\n      onClickStart: () => this.sessionTimer.start(),\n      onClickStop: () => this.onClickStopHandler(),\n      onClickReset: () => this.onClickResetHandler(),\n      onClickContinue: () => this.onClickContinueHandler(),\n      indicator: this.state.indicator,\n      display: this.props.currentTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentTime: state\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onUppdateTime: value => dispatch(onUppdate.getAction({\n    seconds: value\n  }))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\pomodoro-clock\\src\\App.js"],"names":["React","Component","connect","onUppdate","Pomodoro","Timer","timeStringToSeconds","App","breakTimer","sessionTimer","state","indicator","isSession","onChangeBreakhHandler","event","seconds","target","value","setTime","onChangeSessionHandler","onClickResetHandler","reset","onClickStopHandler","stop","onClickContinueHandler","continue","componentDidMount","onStart","setState","console","log","onEnd","start","onInterval","currentTime","props","onUppdateCurrentTime","render","mapStateToProps","mapDispatchToProps","dispatch","onUppdateTime","getAction"],"mappings":"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","sourcesContent":["import React,{\n  Component\n} \nfrom 'react';\n\nimport {\n  connect \n}\nfrom \"react-redux\";\n\nimport {\n  onUppdate\n}\nfrom \"./store/actions\";\n\nimport Pomodoro from \"./components/pomodoro\";\n\nimport {\n  Timer, \n  timeStringToSeconds\n}\nfrom \"./utilities\";\n\nclass App extends Component {\n  breakTimer = new Timer();\n  sessionTimer = new Timer();\n\n  state = {\n    indicator: \"session\",\n    isSession: true,\n  }\n\n  componentDidMount() {\n    this.breakTimer\n    .onStart(() => {\n      this.setState({indicator: \"break\", isSession: false});\n      console.log(\"break timer start\", \"indicator\", this.state.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"break timer end\")\n      this.sessionTimer.start();\n    })\n    .onInterval(currentTime => {\n      this.props.onUppdateCurrentTime(currentTime);\n      console.log(\"break timer inervall: \", currentTime);\n    });\n\n    this.sessionTimer\n    .onStart(() => {\n      this.setState({indicator: \"session\", isSession: true});\n      console.log(\"session timer start\", \"indicator\", this.state.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"session timer end\")\n      this.breakTimer.start();\n    })\n    .onInterval(currentTime => {\n      console.log(this.props.onUppdateCurrentTime(currentTime));\n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  onChangeBreakhHandler = event => {\n    const seconds = timeStringToSeconds(event.target.value);\n    this.breakTimer.setTime(seconds);\n  }\n\n  onChangeSessionHandler = event => {\n    const seconds = timeStringToSeconds(event.target.value);\n    this.sessionTimer.setTime(seconds);\n  }\n\n  onClickResetHandler = () => {\n    this.sessionTimer.reset();\n    this.breakTimer.reset();\n  }\n\n  onClickStopHandler = () => {\n    if (this.state.isSession) {\n      this.sessionTimer.stop();\n    }\n    else {\n      this.breakTimer.stop();\n    }\n  }\n\n  onClickContinueHandler = () => {\n    if (this.state.isSession) {\n      this.sessionTimer.continue();\n    }\n    else {\n      this.breakTimer.continue();\n    }\n  }\n\n  render() {\n    return (\n      <Pomodoro\n      onChangeBreakLength={event => this.onChangeBreakhHandler(event)}\n      onChangeSessionLength={event => this.onChangeSessionHandler(event)}\n      \n      onClickStart={() => this.sessionTimer.start()}\n      onClickStop={() => this.onClickStopHandler()}\n      onClickReset={() => this.onClickResetHandler()}\n      onClickContinue={() => this.onClickContinueHandler()}\n  \n      indicator={this.state.indicator}\n      display={this.props.currentTime}/>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentTime: state\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onUppdateTime: value => dispatch(\n    onUppdate.getAction({seconds: value})\n  )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}