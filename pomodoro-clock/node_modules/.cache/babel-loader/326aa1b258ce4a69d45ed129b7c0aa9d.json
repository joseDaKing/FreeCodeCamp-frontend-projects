{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\pomodoro-clock\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { onUppdateTime, onSetIndicator, onSetIsSession } from \"./store/actions\";\nimport Pomodoro from \"./components/pomodoro\";\nimport { Timer, timeStringToSeconds } from \"./utilities\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.breakTimer = new Timer();\n    this.sessionTimer = new Timer();\n\n    this.onChangeBreakhHandler = event => {\n      const seconds = timeStringToSeconds(event.target.value);\n      this.breakTimer.setTime(seconds);\n    };\n\n    this.onChangeSessionHandler = event => {\n      const seconds = timeStringToSeconds(event.target.value);\n      this.sessionTimer.setTime(seconds);\n    };\n\n    this.onClickResetHandler = () => {\n      this.sessionTimer.reset();\n      this.breakTimer.reset();\n    };\n\n    this.onClickStopHandler = () => {\n      if (this.props.isSession) {\n        this.sessionTimer.stop();\n      } else {\n        this.breakTimer.stop();\n      }\n    };\n\n    this.onClickContinueHandler = () => {\n      if (this.props.isSession) {\n        this.sessionTimer.continue();\n      } else {\n        this.breakTimer.continue();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.breakTimer.onStart(() => {\n      this.props.onSetIndicator(\"break\");\n      console.log(\"break timer start\", \"indicator\", this.props.indicator);\n    }).onEnd(() => {\n      console.log(\"break timer end\");\n      this.sessionTimer.start();\n    }).onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      console.log(\"break timer inervall: \", currentTime);\n    });\n    this.sessionTimer.onStart(() => {\n      this.props.onSetIndicator(\"session\");\n      console.log(\"session timer start\", \"indicator\", this.props.indicator);\n    }).onEnd(() => {\n      console.log(\"session timer end\");\n      this.breakTimer.start();\n    }).onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  render() {\n    return React.createElement(Pomodoro, {\n      onChangeBreakLength: event => this.onChangeBreakhHandler(event),\n      onChangeSessionLength: event => this.onChangeSessionHandler(event),\n      onClickStart: () => this.sessionTimer.start(),\n      onClickStop: () => this.onClickStopHandler(),\n      onClickReset: () => this.onClickResetHandler(),\n      onClickContinue: () => this.onClickContinueHandler(),\n      indicator: this.props.indicator,\n      display: this.props.currentTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentTime: state.currentTime,\n  indicator: state.indicator,\n  isSession: state.isSession\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onUppdateTime: value => dispatch(onUppdateTime.getAction({\n    seconds: value\n  })),\n  onSetIndicator: value => dispatch(onSetIndicator.getAction({\n    indicator: value\n  })),\n  onSetIsSession: value => dispatch(onSetIsSession.getAction({\n    bool: value\n  }))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\pomodoro-clock\\src\\App.js"],"names":["React","Component","connect","onUppdateTime","onSetIndicator","onSetIsSession","Pomodoro","Timer","timeStringToSeconds","App","breakTimer","sessionTimer","onChangeBreakhHandler","event","seconds","target","value","setTime","onChangeSessionHandler","onClickResetHandler","reset","onClickStopHandler","props","isSession","stop","onClickContinueHandler","continue","componentDidMount","onStart","console","log","indicator","onEnd","start","onInterval","currentTime","render","mapStateToProps","state","mapDispatchToProps","dispatch","getAction","bool"],"mappings":"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","sourcesContent":["import React,{\n  Component\n} \nfrom 'react';\n\nimport {\n  connect \n}\nfrom \"react-redux\";\n\nimport {\n  onUppdateTime,\n  onSetIndicator,\n  onSetIsSession\n}\nfrom \"./store/actions\";\n\nimport Pomodoro from \"./components/pomodoro\";\n\nimport {\n  Timer, \n  timeStringToSeconds,\n}\nfrom \"./utilities\";\n\nclass App extends Component {\n  breakTimer = new Timer();\n  sessionTimer = new Timer();\n\n  componentDidMount() {\n    this.breakTimer\n    .onStart(() => {\n      this.props.onSetIndicator(\"break\");\n      console.log(\"break timer start\", \"indicator\", this.props.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"break timer end\")\n      this.sessionTimer.start();\n    })\n    .onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      console.log(\"break timer inervall: \", currentTime);\n    });\n\n    this.sessionTimer\n    .onStart(() => {\n      this.props.onSetIndicator(\"session\");\n      console.log(\"session timer start\", \"indicator\", this.props.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"session timer end\")\n      this.breakTimer.start();\n    })\n    .onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      \n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  onChangeBreakhHandler = event => {\n    const seconds = timeStringToSeconds(event.target.value);\n    this.breakTimer.setTime(seconds);\n  }\n\n  onChangeSessionHandler = event => {\n    const seconds = timeStringToSeconds(event.target.value);\n    this.sessionTimer.setTime(seconds);\n  }\n\n  onClickResetHandler = () => {\n    this.sessionTimer.reset();\n    this.breakTimer.reset();\n  }\n\n  onClickStopHandler = () => {\n    if (this.props.isSession) {\n      this.sessionTimer.stop();\n    }\n    else {\n      this.breakTimer.stop();\n    }\n  }\n\n  onClickContinueHandler = () => {\n    if (this.props.isSession) {\n      this.sessionTimer.continue();\n    }\n    else {\n      this.breakTimer.continue();\n    }\n  }\n\n  render() {\n    return (\n      <Pomodoro\n      onChangeBreakLength={event => this.onChangeBreakhHandler(event)}\n      onChangeSessionLength={event => this.onChangeSessionHandler(event)}\n      \n      onClickStart={() => this.sessionTimer.start()}\n      onClickStop={() => this.onClickStopHandler()}\n      onClickReset={() => this.onClickResetHandler()}\n      onClickContinue={() => this.onClickContinueHandler()}\n  \n      indicator={this.props.indicator}\n      display={this.props.currentTime}/>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentTime: state.currentTime,\n  indicator: state.indicator,\n  isSession: state.isSession\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onUppdateTime: value => dispatch(\n    onUppdateTime.getAction({seconds: value})\n  ),\n  onSetIndicator: value => dispatch(\n    onSetIndicator.getAction({indicator: value})\n  ),\n  onSetIsSession: value => dispatch(\n    onSetIsSession.getAction({bool: value})\n  )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}