{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\pomodoro-clock\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { onUppdateTime, onSetIndicator, onSetIsSession, onReset } from \"./store/actions\";\nimport Pomodoro from \"./components/pomodoro\";\nimport { Timer, timeStringToSeconds } from \"./utilities\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onChangeBreakhHandler = event => {\n      const seconds = timeStringToSeconds(event.target.value);\n      this.breakTimer.setTime(seconds);\n    };\n\n    this.onChangeSessionHandler = event => {\n      const seconds = timeStringToSeconds(event.target.value);\n      this.sessionTimer.setTime(seconds);\n    };\n\n    this.onClickResetHandler = () => {\n      this.sessionTimer.reset();\n      this.breakTimer.reset();\n      this.props.onReset();\n    };\n\n    this.onClickStopHandler = () => {\n      if (this.props.isSession) {\n        this.sessionTimer.stop();\n      } else {\n        this.breakTimer.stop();\n      }\n    };\n\n    this.onClickContinueHandler = () => {\n      if (this.props.isSession) {\n        this.sessionTimer.continue();\n      } else {\n        this.breakTimer.continue();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.breakTimer = new Timer();\n    this.sessionTimer = new Timer();\n    this.breakTimer.onStart(() => {\n      this.props.onSetIndicator(\"break\");\n      console.log(\"break timer start\", \"indicator\", this.props.indicator);\n    }).onEnd(() => {\n      console.log(\"break timer end\");\n      this.sessionTimer.start();\n      this.props.onSetIsSession(true);\n    }).onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      console.log(\"break timer inervall: \", currentTime);\n    });\n    this.sessionTimer.onStart(() => {\n      this.props.onSetIndicator(\"session\");\n      console.log(\"session timer start\", \"indicator\", this.props.indicator);\n    }).onEnd(() => {\n      console.log(\"session timer end\");\n      this.breakTimer.start();\n      this.props.onSetIsSession(false);\n    }).onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  render() {\n    return React.createElement(Pomodoro, {\n      onChangeBreakLength: event => this.onChangeBreakhHandler(event),\n      onChangeSessionLength: event => this.onChangeSessionHandler(event),\n      onClickStart: () => this.sessionTimer.start(),\n      onClickStop: () => this.onClickStopHandler(),\n      onClickReset: () => this.onClickResetHandler(),\n      onClickContinue: () => this.onClickContinueHandler(),\n      indicator: this.props.indicator,\n      display: this.props.currentTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentTime: state.currentTime,\n  indicator: state.indicator,\n  isSession: state.isSession\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onUppdateTime: value => dispatch(onUppdateTime.getAction({\n    seconds: value\n  })),\n  onSetIndicator: value => dispatch(onSetIndicator.getAction({\n    indicator: value\n  })),\n  onSetIsSession: value => dispatch(onSetIsSession.getAction({\n    bool: value\n  })),\n  onReset: () => dispatch(onReset.getAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\pomodoro-clock\\src\\App.js"],"names":["React","Component","connect","onUppdateTime","onSetIndicator","onSetIsSession","onReset","Pomodoro","Timer","timeStringToSeconds","App","onChangeBreakhHandler","event","seconds","target","value","breakTimer","setTime","onChangeSessionHandler","sessionTimer","onClickResetHandler","reset","props","onClickStopHandler","isSession","stop","onClickContinueHandler","continue","componentDidMount","onStart","console","log","indicator","onEnd","start","onInterval","currentTime","render","mapStateToProps","state","mapDispatchToProps","dispatch","getAction","bool"],"mappings":"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","sourcesContent":["import React,{\n  Component\n} \nfrom 'react';\n\nimport {\n  connect \n}\nfrom \"react-redux\";\n\nimport {\n  onUppdateTime,\n  onSetIndicator,\n  onSetIsSession,\n  onReset\n}\nfrom \"./store/actions\";\n\nimport Pomodoro from \"./components/pomodoro\";\n\nimport {\n  Timer, \n  timeStringToSeconds,\n}\nfrom \"./utilities\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.breakTimer = new Timer();\n    this.sessionTimer = new Timer();\n    \n    this.breakTimer\n    .onStart(() => {\n      this.props.onSetIndicator(\"break\");\n\n      console.log(\"break timer start\", \"indicator\", this.props.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"break timer end\")\n\n      this.sessionTimer.start();\n\n      this.props.onSetIsSession(true);\n    })\n    .onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n\n      console.log(\"break timer inervall: \", currentTime);\n    });\n\n    this.sessionTimer\n    .onStart(() => {\n      this.props.onSetIndicator(\"session\");\n\n      console.log(\"session timer start\", \"indicator\", this.props.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"session timer end\")\n      \n      this.breakTimer.start();\n      \n      this.props.onSetIsSession(false);\n    })\n    .onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      \n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  onChangeBreakhHandler = event => {\n    const seconds = timeStringToSeconds(event.target.value);\n    this.breakTimer.setTime(seconds);\n  }\n\n  onChangeSessionHandler = event => {\n    const seconds = timeStringToSeconds(event.target.value);\n    this.sessionTimer.setTime(seconds);\n  }\n\n  onClickResetHandler = () => {\n    this.sessionTimer.reset();\n    this.breakTimer.reset();\n    this.props.onReset();\n    \n  }\n\n  onClickStopHandler = () => {\n    if (this.props.isSession) {\n      this.sessionTimer.stop();\n    }\n    else {\n      this.breakTimer.stop();\n    }\n  }\n\n  onClickContinueHandler = () => {\n    if (this.props.isSession) {\n      this.sessionTimer.continue();\n    }\n    else {\n      this.breakTimer.continue();\n    }\n  }\n\n  render() {\n    return (\n      <Pomodoro\n      onChangeBreakLength={event => this.onChangeBreakhHandler(event)}\n      onChangeSessionLength={event => this.onChangeSessionHandler(event)}\n      \n      onClickStart={() => this.sessionTimer.start()}\n      onClickStop={() => this.onClickStopHandler()}\n      onClickReset={() => this.onClickResetHandler()}\n      onClickContinue={() => this.onClickContinueHandler()}\n  \n      indicator={this.props.indicator}\n      display={this.props.currentTime}/>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentTime: state.currentTime,\n\n  indicator: state.indicator,\n  \n  isSession: state.isSession\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onUppdateTime: value => dispatch(\n    onUppdateTime.getAction({seconds: value})\n  ),\n\n  onSetIndicator: value => dispatch(\n    onSetIndicator.getAction({indicator: value})\n  ),\n\n  onSetIsSession: value => dispatch(\n    onSetIsSession.getAction({bool: value})\n  ),\n\n  onReset: () => dispatch(onReset.getAction())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}