{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\pomodoro-clock\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Pomodoro from \"./components/pomodoro\";\nimport Timer from \"./utilities/timer\";\nimport timeStringToSeconds from \"./utilities/timeStringToSeconds\";\nimport secondsToTimeString from \"./utilities/secondsToTimeString\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.breakTimer = new Timer();\n    this.sessionTimer = new Timer();\n    this.state = {\n      indicator: \"session\",\n      isSession: true,\n      currentTime: secondsToTimeString(timeStringToSeconds(\"00:00\"))\n    };\n\n    this.onChangeBreakhHandler = event => {\n      const seconds = timeStringToSeconds(event.target.value);\n      this.breakTimer.setTime(seconds);\n    };\n\n    this.onChangeSessionHandler = event => {\n      const seconds = timeStringToSeconds(event.target.value);\n      this.sessionTimer.setTime(seconds);\n    };\n\n    this.onClickResetHandler = () => {\n      this.sessionTimer.reset();\n      this.breakTimer.reset();\n    };\n\n    this.onClickStopHandler = () => {\n      if (this.state.isSession) {\n        this.sessionTimer.stop();\n      } else {\n        this.breakTimer.stop();\n      }\n    };\n\n    this.onClickContinueHandler = () => {\n      if (this.state.isSession) {\n        this.sessionTimer.continue();\n      } else {\n        this.breakTimer.continue();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.breakTimer.onStart(() => {\n      this.setState({\n        indicator: \"break\",\n        isSession: false\n      });\n      console.log(\"break timer start\", \"indicator\", this.state.indicator);\n    }).onEnd(() => {\n      console.log(\"break timer end\");\n      this.sessionTimer.start();\n    }).onInterval(currentTime => {\n      this.setState({\n        currentTime: secondsToTimeString(currentTime)\n      });\n      console.log(\"break timer inervall: \", currentTime);\n    });\n    this.sessionTimer.onStart(() => {\n      this.setState({\n        indicator: \"session\",\n        isSession: true\n      });\n      console.log(\"session timer start\", \"indicator\", this.state.indicator);\n    }).onEnd(() => {\n      console.log(\"session timer end\");\n      this.breakTimer.start();\n    }).onInterval(currentTime => {\n      this.setState({\n        currentTime: secondsToTimeString(currentTime)\n      });\n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  render() {\n    return React.createElement(Pomodoro, {\n      onChangeBreakLength: event => this.onChangeBreakhHandler(event),\n      onChangeSessionLength: event => this.onChangeSessionHandler(event),\n      onClickStart: () => this.sessionTimer.start(),\n      onClickStop: () => this.onClickStopHandler(),\n      onClickReset: () => this.onClickResetHandler(),\n      onClickContinue: () => this.onClickContinueHandler(),\n      indicator: this.state.indicator,\n      display: this.state.currentTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\pomodoro-clock\\src\\App.js"],"names":["React","Component","Pomodoro","Timer","timeStringToSeconds","secondsToTimeString","App","breakTimer","sessionTimer","state","indicator","isSession","currentTime","onChangeBreakhHandler","event","seconds","target","value","setTime","onChangeSessionHandler","onClickResetHandler","reset","onClickStopHandler","stop","onClickContinueHandler","continue","componentDidMount","onStart","setState","console","log","onEnd","start","onInterval","render"],"mappings":"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","sourcesContent":["import React,{\n  Component\n} \nfrom 'react';\n\nimport Pomodoro from \"./components/pomodoro\";\nimport Timer from \"./utilities/timer\";\nimport timeStringToSeconds from \"./utilities/timeStringToSeconds\";\nimport secondsToTimeString from \"./utilities/secondsToTimeString\";\n\nclass App extends Component {\n  breakTimer = new Timer();\n  sessionTimer = new Timer();\n\n  state = {\n    indicator: \"session\",\n    isSession: true,\n    currentTime: secondsToTimeString(\n      timeStringToSeconds(\"00:00\")\n    )\n  }\n\n  componentDidMount() {\n    this.breakTimer\n    .onStart(() => {\n      this.setState({indicator: \"break\", isSession: false});\n      console.log(\"break timer start\", \"indicator\", this.state.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"break timer end\")\n      this.sessionTimer.start();\n    })\n    .onInterval(currentTime => {\n      this.setState({currentTime: secondsToTimeString(currentTime)});\n      console.log(\"break timer inervall: \", currentTime);\n    });\n\n    this.sessionTimer\n    .onStart(() => {\n      this.setState({indicator: \"session\", isSession: true});\n      console.log(\"session timer start\", \"indicator\", this.state.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"session timer end\")\n      this.breakTimer.start();\n    })\n    .onInterval(currentTime => {\n      this.setState({currentTime: secondsToTimeString(currentTime)});\n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  onChangeBreakhHandler = event => {\n    const seconds = timeStringToSeconds(event.target.value);\n    this.breakTimer.setTime(seconds);\n  }\n\n  onChangeSessionHandler = event => {\n    const seconds = timeStringToSeconds(event.target.value);\n    this.sessionTimer.setTime(seconds);\n  }\n\n  onClickResetHandler = () => {\n    this.sessionTimer.reset();\n    this.breakTimer.reset();\n  }\n\n  onClickStopHandler = () => {\n    if (this.state.isSession) {\n      this.sessionTimer.stop();\n    }\n    else {\n      this.breakTimer.stop();\n    }\n  }\n\n  onClickContinueHandler = () => {\n    if (this.state.isSession) {\n      this.sessionTimer.continue();\n    }\n    else {\n      this.breakTimer.continue();\n    }\n  }\n\n  render() {\n    return (\n      <Pomodoro\n      onChangeBreakLength={event => this.onChangeBreakhHandler(event)}\n      onChangeSessionLength={event => this.onChangeSessionHandler(event)}\n      \n      onClickStart={() => this.sessionTimer.start()}\n      onClickStop={() => this.onClickStopHandler()}\n      onClickReset={() => this.onClickResetHandler()}\n      onClickContinue={() => this.onClickContinueHandler()}\n  \n      indicator={this.state.indicator}\n      display={this.state.currentTime}/>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}