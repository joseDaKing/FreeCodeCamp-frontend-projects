{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\pomodoro-clock\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nexport default (timeString => {\n  let _timeString$split$map = timeString.split(\":\").map(item => {\n    let isFirstCharZero = item[0] === \"0\";\n\n    if (isFirstCharZero) {\n      return item[1];\n    } else {\n      return item;\n    }\n  }),\n      _timeString$split$map2 = _slicedToArray(_timeString$split$map, 2),\n      hours = _timeString$split$map2[0],\n      minutes = _timeString$split$map2[1];\n\n  const seconds = minutesToSeconds(minutes) + hoursToSeconds(hours);\n  return seconds;\n});\n\nfunction minutesToSeconds(minutes) {\n  minutes = parseInt(minutes);\n  return minutes * 60;\n}\n\nfunction hoursToSeconds(hours) {\n  hours = parseInt(hours);\n  return hours * 60 * 60;\n}","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\pomodoro-clock\\src\\utilities\\timeStringToSeconds.js"],"names":["timeString","split","map","item","isFirstCharZero","hours","minutes","seconds","minutesToSeconds","hoursToSeconds","parseInt"],"mappings":";AAAA,gBAAeA,UAAU,IAAI;AAAA,8BACFA,UAAU,CAACC,KAAX,CAAiB,GAAjB,EAAsBC,GAAtB,CAA0BC,IAAI,IAAI;AACrD,QAAIC,eAAe,GAAGD,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAlC;;AAEA,QAAIC,eAAJ,EAAqB;AACjB,aAAOD,IAAI,CAAC,CAAD,CAAX;AACH,KAFD,MAIK;AACD,aAAOA,IAAP;AACH;AACJ,GAVsB,CADE;AAAA;AAAA,MACpBE,KADoB;AAAA,MACbC,OADa;;AAazB,QAAMC,OAAO,GAAGC,gBAAgB,CAACF,OAAD,CAAhB,GAA4BG,cAAc,CAACJ,KAAD,CAA1D;AAIA,SAAOE,OAAP;AACH,CAlBD;;AAoBA,SAASC,gBAAT,CAA0BF,OAA1B,EAAmC;AAC/BA,EAAAA,OAAO,GAAGI,QAAQ,CAACJ,OAAD,CAAlB;AACA,SAAOA,OAAO,GAAG,EAAjB;AACH;;AAED,SAASG,cAAT,CAAwBJ,KAAxB,EAA+B;AAC3BA,EAAAA,KAAK,GAAGK,QAAQ,CAACL,KAAD,CAAhB;AACA,SAAOA,KAAK,GAAG,EAAR,GAAa,EAApB;AACH","sourcesContent":["export default timeString => {\r\n    let [hours, minutes] = timeString.split(\":\").map(item => {\r\n        let isFirstCharZero = item[0] === \"0\";\r\n        \r\n        if (isFirstCharZero) {\r\n            return item[1];\r\n        }\r\n\r\n        else {\r\n            return item\r\n        }\r\n    });\r\n\r\n    const seconds = minutesToSeconds(minutes) + hoursToSeconds(hours);\r\n\r\n\r\n\r\n    return seconds;\r\n}\r\n\r\nfunction minutesToSeconds(minutes) {\r\n    minutes = parseInt(minutes);\r\n    return minutes * 60;\r\n}\r\n\r\nfunction hoursToSeconds(hours) {\r\n    hours = parseInt(hours);\r\n    return hours * 60 * 60;\r\n}"]},"metadata":{},"sourceType":"module"}