{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\pomodoro-clock\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { onUppdateTime, onSetIndicator, onSetIsSession, onSetSessionTime, onSetBreakTime } from \"./store/actions\";\nimport Pomodoro from \"./components/pomodoro\";\nimport { Timer } from \"./utilities\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.breakTimer = new Timer();\n    this.sessionTimer = new Timer();\n\n    this.onChangeBreakhHandler = event => {\n      //const seconds = timeStringToSeconds(event.target.value);\n      this.props.onSetBreakTime(event.target.value);\n      this.breakTimer.setTime(this.props.breakTime);\n    };\n\n    this.onChangeSessionHandler = event => {\n      //const seconds = timeStringToSeconds(event.target.value);\n      this.props.onSetSessionTime(event.target.value);\n      this.sessionTimer.setTime(this.props.sessionTime);\n    };\n\n    this.onClickResetHandler = () => {\n      this.sessionTimer.reset();\n      this.breakTimer.reset();\n      this.onUppdateTime(0);\n    };\n\n    this.onClickStopHandler = () => {\n      if (this.props.isSession) {\n        this.sessionTimer.stop();\n      } else {\n        this.breakTimer.stop();\n      }\n    };\n\n    this.onClickContinueHandler = () => {\n      if (this.props.isSession) {\n        this.sessionTimer.continue();\n      } else {\n        this.breakTimer.continue();\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.breakTimer.onStart(() => {\n      this.props.onSetIndicator(\"break\");\n      this.props.onSetIsSession(false);\n      console.log(\"break timer start\", \"indicator\", this.props.indicator);\n    }).onEnd(() => {\n      console.log(\"break timer end\");\n      this.sessionTimer.start();\n    }).onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      console.log(\"break timer inervall: \", currentTime);\n    });\n    this.sessionTimer.onStart(() => {\n      this.props.onSetIndicator(\"session\");\n      this.props.onSetIsSession(true);\n      console.log(\"session timer start\", \"indicator\", this.props.indicator);\n    }).onEnd(() => {\n      console.log(\"session timer end\");\n      this.breakTimer.start();\n    }).onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  render() {\n    return React.createElement(Pomodoro, {\n      onChangeBreakLength: event => this.onChangeBreakhHandler(event),\n      onChangeSessionLength: event => this.onChangeSessionHandler(event),\n      onClickStart: () => this.sessionTimer.start(),\n      onClickStop: () => this.onClickStopHandler(),\n      onClickReset: () => this.onClickResetHandler(),\n      onClickContinue: () => this.onClickContinueHandler(),\n      indicator: this.props.indicator,\n      display: this.props.currentTime,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  currentTime: state.currentTime,\n  indicator: state.indicator,\n  isSession: state.isSession,\n  sessionTime: state.sessionTime,\n  breakTime: state.breakTime\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onUppdateTime: value => dispatch(onUppdateTime.getAction({\n    seconds: value\n  })),\n  onSetIndicator: value => dispatch(onSetIndicator.getAction({\n    indicator: value\n  })),\n  onSetIsSession: value => dispatch(onSetIsSession.getAction({\n    bool: value\n  })),\n  onSetSessionTime: value => dispatch(onSetSessionTime.getAction({\n    seconds: value\n  })),\n  onSetBreakTime: value => dispatch(onSetBreakTime.getAction({\n    seconds: value\n  }))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\pomodoro-clock\\src\\App.js"],"names":["React","Component","connect","onUppdateTime","onSetIndicator","onSetIsSession","onSetSessionTime","onSetBreakTime","Pomodoro","Timer","App","breakTimer","sessionTimer","onChangeBreakhHandler","event","props","target","value","setTime","breakTime","onChangeSessionHandler","sessionTime","onClickResetHandler","reset","onClickStopHandler","isSession","stop","onClickContinueHandler","continue","componentDidMount","onStart","console","log","indicator","onEnd","start","onInterval","currentTime","render","mapStateToProps","state","mapDispatchToProps","dispatch","getAction","seconds","bool"],"mappings":"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","sourcesContent":["import React,{\n  Component\n} \nfrom 'react';\n\nimport {\n  connect \n}\nfrom \"react-redux\";\n\nimport {\n  onUppdateTime,\n  onSetIndicator,\n  onSetIsSession,\n  onSetSessionTime,\n  onSetBreakTime\n}\nfrom \"./store/actions\";\n\nimport Pomodoro from \"./components/pomodoro\";\n\nimport {\n  Timer\n}\nfrom \"./utilities\";\n\nclass App extends Component {\n  breakTimer = new Timer();\n  sessionTimer = new Timer();\n\n  componentDidMount() {\n    this.breakTimer\n    .onStart(() => {\n      this.props.onSetIndicator(\"break\");\n      this.props.onSetIsSession(false);\n      console.log(\"break timer start\", \"indicator\", this.props.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"break timer end\")\n      this.sessionTimer.start();\n    })\n    .onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      console.log(\"break timer inervall: \", currentTime);\n    });\n\n    this.sessionTimer\n    .onStart(() => {\n      this.props.onSetIndicator(\"session\");\n      this.props.onSetIsSession(true);\n      console.log(\"session timer start\", \"indicator\", this.props.indicator);\n    })\n    .onEnd(() => {\n      console.log(\"session timer end\")\n      this.breakTimer.start();\n    })\n    .onInterval(currentTime => {\n      this.props.onUppdateTime(currentTime);\n      \n      console.log(\"session timer inervall: \", currentTime);\n    });\n  }\n\n  onChangeBreakhHandler = event => {\n    //const seconds = timeStringToSeconds(event.target.value);\n    this.props.onSetBreakTime(event.target.value);\n    this.breakTimer.setTime(this.props.breakTime);\n  }\n\n  onChangeSessionHandler = event => {\n    //const seconds = timeStringToSeconds(event.target.value);\n    this.props.onSetSessionTime(event.target.value)\n    this.sessionTimer.setTime(this.props.sessionTime);\n  }\n\n  onClickResetHandler = () => {\n    this.sessionTimer.reset();\n    this.breakTimer.reset();\n    this.onUppdateTime(0); \n  }\n\n  onClickStopHandler = () => {\n    if (this.props.isSession) {\n      this.sessionTimer.stop();\n    }\n    else {\n      this.breakTimer.stop();\n    }\n  }\n\n  onClickContinueHandler = () => {\n    if (this.props.isSession) {\n      this.sessionTimer.continue();\n    }\n    else {\n      this.breakTimer.continue();\n    }\n  }\n\n  render() {\n    return (\n      <Pomodoro\n      onChangeBreakLength={event => this.onChangeBreakhHandler(event)}\n      onChangeSessionLength={event => this.onChangeSessionHandler(event)}\n      \n      onClickStart={() => this.sessionTimer.start()}\n      onClickStop={() => this.onClickStopHandler()}\n      onClickReset={() => this.onClickResetHandler()}\n      onClickContinue={() => this.onClickContinueHandler()}\n  \n      indicator={this.props.indicator}\n      display={this.props.currentTime}/>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  currentTime: state.currentTime,\n\n  indicator: state.indicator,\n\n  isSession: state.isSession,\n\n  sessionTime: state.sessionTime,\n\n  breakTime: state.breakTime\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onUppdateTime: value => dispatch(\n    onUppdateTime.getAction({seconds: value})\n  ),\n\n  onSetIndicator: value => dispatch(\n    onSetIndicator.getAction({indicator: value})\n  ),\n\n  onSetIsSession: value => dispatch(\n    onSetIsSession.getAction({bool: value})\n  ),\n  \n  onSetSessionTime: value => dispatch(\n    onSetSessionTime.getAction({\n      seconds: value\n    })\n  ),\n\n  onSetBreakTime: value => dispatch(\n    onSetBreakTime.getAction({\n      seconds: value\n    })\n  )\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}