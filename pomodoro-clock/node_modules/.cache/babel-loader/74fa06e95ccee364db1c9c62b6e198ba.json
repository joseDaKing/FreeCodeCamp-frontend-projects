{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\pomodoro-clock\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nexport default (seconds => {\n  if (seconds === 0) return \"00:00\";\n  const oneHourInSeconds = 60 * 60;\n  const oneMinutInSeconds = 60;\n\n  const _toString$split = (seconds / oneHourInSeconds).toString().split(\".\"),\n        _toString$split2 = _slicedToArray(_toString$split, 2),\n        hours = _toString$split2[0],\n        minutesInHours = _toString$split2[1];\n\n  const minutes = Math.round(parseFloat(\"0.\".concat(minutesInHours)) * oneMinutInSeconds);\n  const timeString = [hours, minutes].map(item => {\n    item = item.toString();\n\n    if (item.length === 1) {\n      item = \"0\".concat(item);\n    }\n\n    return item;\n  }).join(\":\");\n  return timeString;\n});","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\pomodoro-clock\\src\\utilities\\secondsToTimeString.js"],"names":["seconds","oneHourInSeconds","oneMinutInSeconds","toString","split","hours","minutesInHours","minutes","Math","round","parseFloat","timeString","map","item","length","join"],"mappings":";AAAA,gBAAeA,OAAO,IAAI;AACtB,MAAIA,OAAO,KAAK,CAAhB,EAAmB,OAAO,OAAP;AACnB,QAAMC,gBAAgB,GAAG,KAAK,EAA9B;AACA,QAAMC,iBAAiB,GAAG,EAA1B;;AAHsB,0BAKU,CAACF,OAAO,GAACC,gBAAT,EAA2BE,QAA3B,GAAsCC,KAAtC,CAA4C,GAA5C,CALV;AAAA;AAAA,QAKfC,KALe;AAAA,QAKRC,cALQ;;AAOtB,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,UAAU,aAAMJ,cAAN,EAAV,GAAoCJ,iBAA/C,CAAhB;AAEA,QAAMS,UAAU,GAAG,CAACN,KAAD,EAAQE,OAAR,EAAiBK,GAAjB,CAAqBC,IAAI,IAAI;AAC5CA,IAAAA,IAAI,GAAGA,IAAI,CAACV,QAAL,EAAP;;AAEA,QAAIU,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACnBD,MAAAA,IAAI,cAAOA,IAAP,CAAJ;AACH;;AAED,WAAOA,IAAP;AACH,GARkB,EAQhBE,IARgB,CAQX,GARW,CAAnB;AAUA,SAAOJ,UAAP;AACH,CApBD","sourcesContent":["export default seconds => {\r\n    if (seconds === 0) return \"00:00\"\r\n    const oneHourInSeconds = 60 * 60;\r\n    const oneMinutInSeconds = 60;\r\n\r\n    const [hours, minutesInHours] = (seconds/oneHourInSeconds).toString().split(\".\");\r\n    \r\n    const minutes = Math.round(parseFloat(`0.${minutesInHours}`) * oneMinutInSeconds);\r\n\r\n    const timeString = [hours, minutes].map(item => {\r\n        item = item.toString();\r\n        \r\n        if (item.length === 1) {\r\n            item = `0${item}`;\r\n        } \r\n\r\n        return item;\r\n    }).join(\":\");\r\n\r\n    return timeString\r\n};"]},"metadata":{},"sourceType":"module"}