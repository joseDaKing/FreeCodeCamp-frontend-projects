{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport DrumMachine from \"./components/drumMachine\";\nimport { keys, soundTypes1, soundTypes2 } from \"./globals\";\nimport * as actions from \"./store/actions/index\";\nimport { connect } from \"react-redux\"; //this.audio.volume = (1 - 0); 0 är lägst, 1 är högst\n//this.audio.muted = false;\n//this.audio.defaultMuted = false;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.pressedKey = \"\";\n\n      this.setPressedKey = function (key) {\n        key = key.toLowerCase();\n        var info;\n\n        if (_this.props.bank) {\n          info = soundTypes1[key];\n        } else {\n          info = soundTypes2[key];\n        }\n\n        console.log(info);\n      };\n\n      document.addEventListener(\"keydown\", function (event) {\n        _this.setPressedKey(event.key);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(DrumMachine, {\n        onVolumeChange: function onVolumeChange(e) {\n          return _this2.props.onSetVolume(e.target.value);\n        },\n        volumeValue: this.props.volume,\n        soundType: this.props.soundType,\n        onClickPower: function onClickPower() {\n          return _this2.props.onTogglePower();\n        },\n        setPowerValue: this.props.power,\n        onClickBank: function onClickBank() {\n          return _this2.props.onToggleBank();\n        },\n        setBankValue: this.props.bank,\n        onClickQ: function onClickQ() {\n          return _this2.setPressedKey(\"Q\");\n        },\n        onClickW: function onClickW() {\n          return _this2.setPressedKey(\"W\");\n        },\n        onClickE: function onClickE() {\n          return _this2.setPressedKey(\"E\");\n        },\n        onClickA: function onClickA() {\n          return _this2.setPressedKey(\"A\");\n        },\n        onClickS: function onClickS() {\n          return _this2.setPressedKey(\"S\");\n        },\n        onClickD: function onClickD() {\n          return _this2.setPressedKey(\"D\");\n        },\n        onClickZ: function onClickZ() {\n          return _this2.setPressedKey(\"Z\");\n        },\n        onClickX: function onClickX() {\n          return _this2.setPressedKey(\"X\");\n        },\n        onClickC: function onClickC() {\n          return _this2.setPressedKey(\"C\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    volume: state.volume,\n    bank: state.bank,\n    power: state.power,\n    soundType: state.soundType\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onTogglePower: function onTogglePower() {\n      return dispatch(actions.togglePower.getAction());\n    },\n    onToggleBank: function onToggleBank() {\n      return dispatch(actions.toggleBank.getAction());\n    },\n    onSetVolume: function onSetVolume(value) {\n      return dispatch(actions.setVolume.getAction({\n        volume: value\n      }));\n    },\n    onSetSoundType: function onSetSoundType(type) {\n      return dispatch(actions.setSoundType.getAction({\n        type: type\n      }));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\drum-machine\\src\\App.js"],"names":["React","Component","DrumMachine","keys","soundTypes1","soundTypes2","actions","connect","App","pressedKey","setPressedKey","key","toLowerCase","info","props","bank","console","log","document","addEventListener","event","e","onSetVolume","target","value","volume","soundType","onTogglePower","power","onToggleBank","mapStateToProps","state","mapDispatchToProps","dispatch","togglePower","getAction","toggleBank","setVolume","onSetSoundType","type","setSoundType"],"mappings":"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","sourcesContent":["import React, { \n  Component\n} \nfrom 'react';\n\nimport DrumMachine from \"./components/drumMachine\"\n\nimport {\n  keys,\n  soundTypes1,\n  soundTypes2\n} \nfrom \"./globals\"\n\nimport * as actions from \"./store/actions/index\";\n\nimport {\n  connect \n}\nfrom \"react-redux\";\n\n//this.audio.volume = (1 - 0); 0 är lägst, 1 är högst\n//this.audio.muted = false;\n//this.audio.defaultMuted = false;\n\nclass App extends Component {\n  componentDidMount() {\n    this.pressedKey = \"\";\n    \n    this.setPressedKey = key => {\n\n      key = key.toLowerCase();\n\n      let info;\n    \n      if (this.props.bank) {\n        info = soundTypes1[key];\n      }\n\n      else {\n        info = soundTypes2[key];\n      }\n\n      console.log(info);\n    }\n\n    document.addEventListener(\"keydown\", event => {\n      this.setPressedKey(event.key);\n    })\n  }\n\n  render() {\n    return (\n      <DrumMachine\n      onVolumeChange={e => this.props.onSetVolume(e.target.value)}\n      volumeValue={this.props.volume}\n      soundType={this.props.soundType}\n\n      onClickPower={() => this.props.onTogglePower()}\n      setPowerValue={this.props.power}\n\n      onClickBank={() => this.props.onToggleBank()}\n      setBankValue={this.props.bank}\n\n      onClickQ={() => this.setPressedKey(\"Q\")}\n      onClickW={() => this.setPressedKey(\"W\")}\n      onClickE={() => this.setPressedKey(\"E\")}\n\n      onClickA={() => this.setPressedKey(\"A\")}\n      onClickS={() => this.setPressedKey(\"S\")}\n      onClickD={() => this.setPressedKey(\"D\")}\n\n      onClickZ={() => this.setPressedKey(\"Z\")}\n      onClickX={() => this.setPressedKey(\"X\")}\n      onClickC={() => this.setPressedKey(\"C\")}/>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  volume: state.volume,\n  \n  bank: state.bank,\n  \n  power: state.power,\n\n  soundType: state.soundType\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTogglePower: () => dispatch(actions.togglePower.getAction()),\n  \n  onToggleBank: () => dispatch(actions.toggleBank.getAction()),\n  \n  onSetVolume: value => dispatch(actions.setVolume.getAction({\n    volume: value\n  })),\n\n  onSetSoundType: type => dispatch(actions.setSoundType.getAction({\n    type: type\n  }))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}