{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport DrumMachine from \"./components/drumMachine\";\nimport { soundTypes1, soundTypes2 } from \"./globals\";\nimport * as actions from \"./store/actions/index\";\nimport { connect } from \"react-redux\"; //this.audio.volume = (1 - 0); 0 är lägst, 1 är högst\n//this.audio.muted = false;\n//this.audio.defaultMuted = false;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.playSound = function (url) {\n        var audio = new Audio(url);\n        audio.play();\n        audio.muted = _this.props.power;\n      };\n\n      this.setSoundType = function (key) {\n        var info;\n\n        if (_this.props.bank) {\n          info = soundTypes2[key];\n        } else {\n          info = soundTypes1[key];\n        }\n\n        if (info) {\n          _this.playSound(info.url);\n\n          _this.props.onSetSoundType(info.id);\n        }\n      };\n\n      document.addEventListener(\"keydown\", function (event) {\n        _this.setSoundType(event.key);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(DrumMachine, {\n        onVolumeChange: function onVolumeChange(e) {\n          return _this2.props.onSetVolume(e.target.value);\n        },\n        volumeValue: this.props.volume,\n        soundType: this.props.soundType,\n        onClickPower: function onClickPower() {\n          return _this2.props.onTogglePower();\n        },\n        setPowerValue: this.props.power,\n        onClickBank: function onClickBank() {\n          return _this2.props.onToggleBank();\n        },\n        setBankValue: this.props.bank,\n        onClickQ: function onClickQ() {\n          return _this2.setSoundType(\"Q\");\n        },\n        onClickW: function onClickW() {\n          return _this2.setSoundType(\"W\");\n        },\n        onClickE: function onClickE() {\n          return _this2.setSoundType(\"E\");\n        },\n        onClickA: function onClickA() {\n          return _this2.setSoundType(\"A\");\n        },\n        onClickS: function onClickS() {\n          return _this2.setSoundType(\"S\");\n        },\n        onClickD: function onClickD() {\n          return _this2.setSoundType(\"D\");\n        },\n        onClickZ: function onClickZ() {\n          return _this2.setSoundType(\"Z\");\n        },\n        onClickX: function onClickX() {\n          return _this2.setSoundType(\"X\");\n        },\n        onClickC: function onClickC() {\n          return _this2.setSoundType(\"C\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    volume: state.volume,\n    bank: state.bank,\n    power: state.power,\n    soundType: state.soundType\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onTogglePower: function onTogglePower() {\n      return dispatch(actions.togglePower.getAction());\n    },\n    onToggleBank: function onToggleBank() {\n      return dispatch(actions.toggleBank.getAction());\n    },\n    onSetVolume: function onSetVolume(value) {\n      return dispatch(actions.setVolume.getAction({\n        volume: value\n      }));\n    },\n    onSetSoundType: function onSetSoundType(type) {\n      return dispatch(actions.setSoundType.getAction({\n        type: type\n      }));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\drum-machine\\src\\App.js"],"names":["React","Component","DrumMachine","soundTypes1","soundTypes2","actions","connect","App","playSound","url","audio","Audio","play","muted","props","power","setSoundType","key","info","bank","onSetSoundType","id","document","addEventListener","event","e","onSetVolume","target","value","volume","soundType","onTogglePower","onToggleBank","mapStateToProps","state","mapDispatchToProps","dispatch","togglePower","getAction","toggleBank","setVolume","type"],"mappings":"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","sourcesContent":["import React, { \n  Component\n} \nfrom 'react';\n\nimport DrumMachine from \"./components/drumMachine\"\n\nimport {\n  soundTypes1,\n  soundTypes2\n} \nfrom \"./globals\"\n\nimport * as actions from \"./store/actions/index\";\n\nimport {\n  connect \n}\nfrom \"react-redux\";\n\n//this.audio.volume = (1 - 0); 0 är lägst, 1 är högst\n//this.audio.muted = false;\n//this.audio.defaultMuted = false;\n\nclass App extends Component {\n  componentDidMount() { \n    this.playSound = url => {\n      const audio = new Audio(url);\n      audio.play();\n      \n      audio.muted = this.props.power;      \n    }\n    \n    this.setSoundType = key => {\n      let info;\n    \n      if (this.props.bank) {\n        info = soundTypes2[key];\n      }\n\n      else {\n        \n        info = soundTypes1[key];\n      }\n\n      if (info) {\n        this.playSound(info.url)\n        this.props.onSetSoundType(info.id);\n      }\n    }\n\n    document.addEventListener(\"keydown\", event => {\n      this.setSoundType(event.key);\n    })\n  }\n\n  render() {\n    return (\n      <DrumMachine\n      onVolumeChange={e => this.props.onSetVolume(e.target.value)}\n      volumeValue={this.props.volume}\n      soundType={this.props.soundType}\n\n      onClickPower={() => this.props.onTogglePower()}\n      setPowerValue={this.props.power}\n\n      onClickBank={() => this.props.onToggleBank()}\n      setBankValue={this.props.bank}\n\n      onClickQ={() => this.setSoundType(\"Q\")}\n      onClickW={() => this.setSoundType(\"W\")}\n      onClickE={() => this.setSoundType(\"E\")}\n\n      onClickA={() => this.setSoundType(\"A\")}\n      onClickS={() => this.setSoundType(\"S\")}\n      onClickD={() => this.setSoundType(\"D\")}\n\n      onClickZ={() => this.setSoundType(\"Z\")}\n      onClickX={() => this.setSoundType(\"X\")}\n      onClickC={() => this.setSoundType(\"C\")}/>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  volume: state.volume,\n  \n  bank: state.bank,\n  \n  power: state.power,\n\n  soundType: state.soundType\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTogglePower: () => dispatch(actions.togglePower.getAction()),\n  \n  onToggleBank: () => dispatch(actions.toggleBank.getAction()),\n  \n  onSetVolume: value => dispatch(actions.setVolume.getAction({\n    volume: value\n  })),\n\n  onSetSoundType: type => dispatch(actions.setSoundType.getAction({\n    type: type\n  }))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}