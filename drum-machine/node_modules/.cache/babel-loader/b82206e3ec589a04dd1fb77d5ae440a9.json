{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\drum-machine\\\\src\\\\App.js\";\nimport React, { PureComponent, Fragment } from 'react';\nimport DrumMachine from \"./components/drumMachine\";\nimport { soundTypes1, soundTypes2 } from \"./globals\";\nimport * as actions from \"./store/actions/index\";\nimport { connect } from \"react-redux\"; //this.audio.volume = (1 - 0); 0 är lägst, 1 är högst\n//this.audio.muted = false;\n//this.audio.defaultMuted = false;\n\nvar App =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(App, _PureComponent);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.playSound = function (url) {\n        var audio = new Audio(url);\n        audio.muted = !_this.props.power;\n        audio.volume = _this.props.volume / 100;\n        audio.play();\n      };\n\n      this.getSoundType = function (key) {\n        return _this.props.bank ? soundTypes2[key] : soundTypes1[key];\n      };\n\n      this.setSoundType = function (key) {\n        key = key.toLowerCase();\n\n        var info = _this.getSoundType(key);\n\n        if (info) {\n          _this.playSound(info.url);\n\n          _this.props.onSetSoundType(info.id);\n        }\n      };\n\n      document.addEventListener(\"keydown\", function (event) {\n        _this.setSoundType(event.key);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(DrumMachine, {\n        onVolumeChange: function onVolumeChange(event) {\n          return _this2.props.onSetVolume(event.target.value);\n        },\n        volumeValue: this.props.volume,\n        soundType: this.props.soundType,\n        onClickPower: function onClickPower() {\n          return _this2.props.onTogglePower();\n        },\n        setPowerValue: this.props.power,\n        onClickBank: function onClickBank() {\n          return _this2.props.onToggleBank();\n        },\n        setBankValue: this.props.bank,\n        onClickQ: function onClickQ() {\n          return _this2.setSoundType(\"Q\");\n        },\n        onClickW: function onClickW() {\n          return _this2.setSoundType(\"W\");\n        },\n        onClickE: function onClickE() {\n          return _this2.setSoundType(\"E\");\n        },\n        onClickA: function onClickA() {\n          return _this2.setSoundType(\"A\");\n        },\n        onClickS: function onClickS() {\n          return _this2.setSoundType(\"S\");\n        },\n        onClickD: function onClickD() {\n          return _this2.setSoundType(\"D\");\n        },\n        onClickZ: function onClickZ() {\n          return _this2.setSoundType(\"Z\");\n        },\n        onClickX: function onClickX() {\n          return _this2.setSoundType(\"X\");\n        },\n        onClickC: function onClickC() {\n          return _this2.setSoundType(\"C\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(PureComponent);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    volume: state.volume,\n    bank: state.bank,\n    power: state.power,\n    soundType: state.soundType\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onTogglePower: function onTogglePower() {\n      return dispatch(actions.togglePower.getAction());\n    },\n    onToggleBank: function onToggleBank() {\n      return dispatch(actions.toggleBank.getAction());\n    },\n    onSetVolume: function onSetVolume(value) {\n      return dispatch(actions.setVolume.getAction({\n        volume: value\n      }));\n    },\n    onSetSoundType: function onSetSoundType(type) {\n      return dispatch(actions.setSoundType.getAction({\n        type: type\n      }));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\drum-machine\\src\\App.js"],"names":["React","PureComponent","Fragment","DrumMachine","soundTypes1","soundTypes2","actions","connect","App","playSound","url","audio","Audio","muted","props","power","volume","play","getSoundType","key","bank","setSoundType","toLowerCase","info","onSetSoundType","id","document","addEventListener","event","onSetVolume","target","value","soundType","onTogglePower","onToggleBank","mapStateToProps","state","mapDispatchToProps","dispatch","togglePower","getAction","toggleBank","setVolume","type"],"mappings":"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","sourcesContent":["import React, { \n  PureComponent,\n  Fragment\n} \nfrom 'react';\n\nimport DrumMachine from \"./components/drumMachine\"\n\nimport {\n  soundTypes1,\n  soundTypes2\n} \nfrom \"./globals\"\n\nimport * as actions from \"./store/actions/index\";\n\nimport {\n  connect \n}\nfrom \"react-redux\";\n\n//this.audio.volume = (1 - 0); 0 är lägst, 1 är högst\n//this.audio.muted = false;\n//this.audio.defaultMuted = false;\n\nclass App extends PureComponent {\n  componentDidMount() { \n    this.playSound = url => {\n      const audio = new Audio(url);\n      audio.muted = !this.props.power; \n      audio.volume = (this.props.volume/100);     \n      audio.play();\n    }\n\n    this.getSoundType = key => (\n      this.props.bank? soundTypes2[key]: soundTypes1[key]\n    )\n    \n    this.setSoundType = key => {\n      key = key.toLowerCase();\n      const info = this.getSoundType(key);\n\n      if (info) {\n        this.playSound(info.url)\n        this.props.onSetSoundType(info.id);\n      }\n    }\n\n    document.addEventListener(\"keydown\", event => {\n      this.setSoundType(event.key);\n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <DrumMachine\n        onVolumeChange={event => this.props.onSetVolume(event.target.value)}\n        volumeValue={this.props.volume}\n        soundType={this.props.soundType}\n\n        onClickPower={() => this.props.onTogglePower()}\n        setPowerValue={this.props.power}\n\n        onClickBank={() => this.props.onToggleBank()}\n        setBankValue={this.props.bank}\n\n        onClickQ={() => this.setSoundType(\"Q\")}\n        onClickW={() => this.setSoundType(\"W\")}\n        onClickE={() => this.setSoundType(\"E\")}\n\n        onClickA={() => this.setSoundType(\"A\")}\n        onClickS={() => this.setSoundType(\"S\")}\n        onClickD={() => this.setSoundType(\"D\")}\n\n        onClickZ={() => this.setSoundType(\"Z\")}\n        onClickX={() => this.setSoundType(\"X\")}\n        onClickC={() => this.setSoundType(\"C\")}/>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  volume: state.volume,\n  \n  bank: state.bank,\n  \n  power: state.power,\n\n  soundType: state.soundType\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onTogglePower: () => dispatch(actions.togglePower.getAction()),\n  \n  onToggleBank: () => dispatch(actions.toggleBank.getAction()),\n  \n  onSetVolume: value => dispatch(actions.setVolume.getAction({\n    volume: value\n  })),\n\n  onSetSoundType: type => dispatch(actions.setSoundType.getAction({\n    type: type\n  }))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}