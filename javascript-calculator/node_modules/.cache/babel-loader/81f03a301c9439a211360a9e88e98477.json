{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\src\\\\components\\\\calculator.js\";\nimport React, { Component } from 'react';\nimport { Jumbotron, VerticalLine, Display, Button, Grid } from \"./bootstrap\";\n\nvar _default =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(_default, _Component);\n\n  function _default() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(_default)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      string: \"\"\n    };\n    _this.layout = [7, 8, 9, \"/\", 4, 5, 6, \"X\", 1, 2, 3, \"-\", 0, \".\", \"=\", \"+\"];\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"addCharToString\",\n    value: function addCharToString(char) {\n      this.setState(function (prevState) {\n        return {\n          string: \"\".concat(prevState.string, \" \").concat(char)\n        };\n      });\n    }\n  }, {\n    key: \"setClickableButton\",\n    value: function setClickableButton(value) {\n      var _this2 = this;\n\n      var button = React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.addCharToString(value);\n        },\n        key: value,\n        name: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      });\n\n      if (button === \"=\") {\n        button = React.createElement(Button, {\n          onClick: this.props.onEqual,\n          key: value,\n          name: button,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        });\n      }\n\n      return button;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Jumbotron, {\n        width: \"30rem\",\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(Display, {\n        text: this.state.string,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.props.delete,\n        name: \"AC\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })), React.createElement(VerticalLine, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        columns: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, this.layout.map(this.setClickableButton)));\n    }\n  }]);\n\n  return _default;\n}(Component);\n\nexport { _default as default };","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\javascript-calculator\\src\\components\\calculator.js"],"names":["React","Component","Jumbotron","VerticalLine","Display","Button","Grid","state","string","layout","char","setState","prevState","value","button","addCharToString","props","onEqual","delete","map","setClickableButton"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IACIC,SADJ,QAGK,OAHL;AAKA,SACIC,SADJ,EAEIC,YAFJ,EAGIC,OAHJ,EAIIC,MAJJ,EAKIC,IALJ,QAOK,aAPL;;;;;;;;;;;;;;;;;;;UAUIC,K,GAAQ;AACJC,MAAAA,MAAM,EAAE;AADJ,K;UAIRC,M,GAAS,CACL,CADK,EACD,CADC,EACI,CADJ,EACQ,GADR,EAEL,CAFK,EAED,CAFC,EAEI,CAFJ,EAEQ,GAFR,EAGL,CAHK,EAGD,CAHC,EAGI,CAHJ,EAGQ,GAHR,EAIL,CAJK,EAIF,GAJE,EAIG,GAJH,EAIQ,GAJR,C;;;;;;oCAOOC,I,EAAM;AAClB,WAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AACxBJ,UAAAA,MAAM,YAAKI,SAAS,CAACJ,MAAf,cAAyBE,IAAzB;AADkB,SAAL;AAAA,OAAvB;AAGH;;;uCAEkBG,K,EAAO;AAAA;;AACtB,UAAIC,MAAM,GAAG,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACC,eAAL,CAAqBF,KAArB,CAAN;AAAA,SAAjB;AAAoD,QAAA,GAAG,EAAEA,KAAzD;AAAgE,QAAA,IAAI,EAAEA,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAb;;AAEA,UAAIC,MAAM,KAAK,GAAf,EAAoB;AAChBA,QAAAA,MAAM,GAAG,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,KAAKE,KAAL,CAAWC,OAA5B;AAAqC,UAAA,GAAG,EAAEJ,KAA1C;AAAiD,UAAA,IAAI,EAAEC,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AACH;;AAED,aAAOA,MAAP;AACH;;;6BAEQ;AACL,aACI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAC,OAAjB;AAAyB,QAAA,MAAM,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,OAAD;AAAS,QAAA,IAAI,EAAE,KAAKP,KAAL,CAAWC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKQ,KAAL,CAAWE,MAA5B;AAAoC,QAAA,IAAI,EAAC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAKI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAOI,oBAAC,IAAD;AAAM,QAAA,OAAO,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,KAAKT,MAAL,CAAYU,GAAZ,CAAgB,KAAKC,kBAArB,CADD,CAPJ,CADJ;AAaH;;;;EA1CwBnB,S","sourcesContent":["import React, { \r\n    Component \r\n} \r\nfrom 'react';\r\n\r\nimport {\r\n    Jumbotron,\r\n    VerticalLine,\r\n    Display,\r\n    Button,\r\n    Grid\r\n}\r\nfrom \"./bootstrap\";\r\n\r\nexport default class extends Component {  \r\n    state = {\r\n        string: \"\"\r\n    }\r\n\r\n    layout = [\r\n        7,  8,   9,  \"/\",\r\n        4,  5,   6,  \"X\",\r\n        1,  2,   3,  \"-\",\r\n        0, \".\", \"=\", \"+\"\r\n    ];\r\n\r\n    addCharToString(char) {\r\n        this.setState(prevState => ({\r\n            string: `${prevState.string} ${char}`\r\n        }))\r\n    }\r\n\r\n    setClickableButton(value) {\r\n        let button = <Button onClick={() => this.addCharToString(value)} key={value} name={value}/>;\r\n                    \r\n        if (button === \"=\") {\r\n            button = <Button onClick={this.props.onEqual} key={value} name={button}/>\r\n        }\r\n\r\n        return button;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Jumbotron width=\"30rem\" center>\r\n                <Display text={this.state.string}>\r\n                    <Button onClick={this.props.delete} name=\"AC\"/>\r\n                </Display>\r\n                \r\n                <VerticalLine/>    \r\n                \r\n                <Grid columns={4}>\r\n                {this.layout.map(this.setClickableButton)}\r\n                </Grid>\r\n            </Jumbotron>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}