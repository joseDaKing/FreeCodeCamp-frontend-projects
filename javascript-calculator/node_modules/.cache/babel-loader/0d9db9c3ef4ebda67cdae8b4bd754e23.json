{"ast":null,"code":"import { onAddChar, onDelete, onEqual, onAddMath, onSubtractMath, onDivideMath, onMultipleMath } from \"./actions.js\";\nimport { concatObjects, copyObject } from \"../utilities\";\nimport { stat } from \"fs\";\nvar initState = {\n  displayString: \"\",\n  calcString: \"\",\n  value: 0,\n  isCalc: false,\n  usedOperator: \"\",\n  isStart: Start\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case onDelete.getName:\n      return copyObject(initState);\n\n    case onEqual.getName:\n      if (state.calcString) {\n        return concatObjects(initState, {\n          displayString: \"\".concat(mathOperator(state.usedOperator, state)),\n          calcString: \"\".concat(mathOperator(state.usedOperator, state))\n        });\n      }\n\n    case onAddChar.getName:\n      return concatObjects(state, {\n        calcString: state.calcString + calcStringValidation(action.char),\n        displayString: \"\".concat(state.displayString).concat(action.char)\n      });\n\n    case onAddMath.getName:\n      return a(\"+\", state);\n\n    case onMultipleMath.getName:\n      return a(\"*\", state);\n\n    case onSubtractMath.getName:\n      return a(\"-\", state);\n\n    case onDivideMath.getName:\n      return a(\"/\", state);\n\n    default:\n      return state;\n  }\n});\n\nfunction calcStringValidation(char) {\n  switch (char) {\n    case \"-\":\n    case \"+\":\n    case \"/\":\n    case \"X\":\n      return \"\";\n\n    default:\n      return char;\n  }\n}\n\nfunction mathOperator(type, state) {\n  var a = parseFloat(state.value);\n  var b = parseFloat(state.calcString);\n  console.log(\"A: \".concat(a, \", B: \").concat(b));\n\n  switch (type) {\n    case \"+\":\n      return a + b;\n\n    case \"-\":\n      return a - b;\n\n    case \"/\":\n      if (state) return a / b;\n\n    case \"*\":\n      a = a === 0 ? 1 : a;\n      b = b === 0 ? b : b;\n      return a * b;\n\n    default:\n      return 0;\n  }\n}\n\nfunction a(operator, state) {\n  return concatObjects(state, {\n    calcString: \"\",\n    value: mathOperator(operator, state),\n    usedOperator: operator,\n    isStart: false\n  });\n}","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\javascript-calculator\\src\\store\\reducer.js"],"names":["onAddChar","onDelete","onEqual","onAddMath","onSubtractMath","onDivideMath","onMultipleMath","concatObjects","copyObject","stat","initState","displayString","calcString","value","isCalc","usedOperator","isStart","Start","state","action","type","getName","mathOperator","calcStringValidation","char","a","parseFloat","b","console","log","operator"],"mappings":"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","sourcesContent":["import {\r\n    onAddChar,\r\n    onDelete,\r\n    onEqual,\r\n    onAddMath,\r\n    onSubtractMath,\r\n    onDivideMath,\r\n    onMultipleMath\r\n}\r\nfrom \"./actions.js\";\r\n\r\nimport {\r\n    concatObjects,\r\n    copyObject,\r\n}\r\nfrom \"../utilities\";\r\nimport { stat } from \"fs\";\r\n\r\nconst initState = {\r\n    displayString: \"\",\r\n    calcString: \"\",\r\n    value: 0,\r\n    isCalc: false,\r\n    usedOperator: \"\",\r\n    isStart: Start\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type) {\r\n        case onDelete.getName:\r\n            return copyObject(initState);\r\n\r\n        case onEqual.getName:\r\n            if (state.calcString) {\r\n                return concatObjects(initState, {\r\n                    displayString: `${\r\n                        mathOperator(state.usedOperator, state)\r\n                    }`,\r\n\r\n                    calcString: `${\r\n                        mathOperator(state.usedOperator, state)\r\n                    }`,\r\n                })\r\n            }\r\n\r\n        case onAddChar.getName: \r\n            return concatObjects(state, {\r\n                calcString: state.calcString + calcStringValidation(action.char),\r\n                displayString: `${state.displayString}${action.char}`\r\n            });\r\n\r\n        case onAddMath.getName:\r\n            return a(\"+\", state);\r\n\r\n        case onMultipleMath.getName:\r\n            return a(\"*\", state);\r\n\r\n        case onSubtractMath.getName:\r\n            return a(\"-\", state);\r\n\r\n        case onDivideMath.getName:\r\n            return a(\"/\", state);\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction calcStringValidation(char) {\r\n    switch(char) {\r\n        case \"-\":\r\n        case \"+\":\r\n        case \"/\":\r\n        case \"X\":\r\n            return \"\"\r\n        default:\r\n            return char;\r\n    }\r\n}\r\n\r\nfunction mathOperator(type, state) {\r\n    let a = parseFloat(state.value);\r\n    let b = parseFloat(state.calcString)\r\n\r\n    console.log(`A: ${a}, B: ${b}`);\r\n\r\n    switch(type) {\r\n        case \"+\":\r\n            return a + b;\r\n            \r\n        case \"-\":\r\n            return a - b;\r\n\r\n        case \"/\":\r\n            if (state)\r\n            return a / b;\r\n\r\n        case \"*\":\r\n            a = a === 0? 1: a;\r\n            b = b === 0? b: b; \r\n            return a * b;\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nfunction a(operator, state) {\r\n    return concatObjects(state, {\r\n        calcString: \"\",\r\n        value: mathOperator(operator, state),\r\n        usedOperator: operator,\r\n        isStart: false\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}