{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\src\\\\components\\\\calculator.js\";\nimport React, { useState } from 'react';\nimport { Jumbotron, VerticalLine, Display, Button, Grid } from \"./bootstrap\";\nexport default (function (props) {\n  var layout = [7, 8, 9, \"/\", 4, 5, 6, \"X\", 1, 2, 3, \"-\", 0, \".\", \"=\", \"+\"];\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var switchCaseOperators = function switchCaseOperators(_ref) {\n    var valueToCheck = _ref.valueToCheck,\n        valueToReturn = _ref.valueToReturn,\n        defaultValueToReturn = _ref.defaultValueToReturn;\n\n    switch (valueToCheck) {\n      case \"/\":\n      case \"X\":\n      case \"-\":\n      case \"+\":\n        return valueToReturn;\n\n      default:\n        return defaultValueToReturn;\n    }\n  };\n\n  var validation1 = function validation1(value) {\n    value = value.toString();\n    var lastCharOfState = state[state.length - 1];\n\n    if (!lastCharOfState && !(value === \".\")) {\n      return switchCaseOperators({\n        valueToCheck: value,\n        valueToReturn: \"\",\n        defaultValueToReturn: value\n      });\n    }\n\n    return switchCaseOperators({\n      valueToCheck: lastCharOfState,\n      valueToReturn: switchCaseOperators({\n        valueToCheck: value,\n        valueToReturn: \"\",\n        defaultValueToReturn: value\n      }),\n      defaultValueToReturn: value\n    });\n  };\n\n  var fn = function fn(value) {\n    value = validation(value);\n    var string = \"\".concat(state).concat(value);\n    string = \"\".concat(state).concat(value);\n    setState(string);\n  };\n\n  var buttons = function buttons(value) {\n    var button;\n\n    if (!(value === \"=\")) {\n      button = React.createElement(Button, {\n        onClick: function onClick() {\n          return fn(value);\n        },\n        key: value,\n        name: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      });\n    } else {\n      button = React.createElement(Button, {\n        onClick: props.onClickEqual,\n        key: value,\n        name: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      });\n    }\n\n    return button;\n  };\n\n  return React.createElement(Jumbotron, {\n    width: \"30rem\",\n    center: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Display, {\n    text: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: props.onClickDelete,\n    name: \"AC\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })), React.createElement(VerticalLine, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    columns: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, layout.map(buttons)));\n});","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\javascript-calculator\\src\\components\\calculator.js"],"names":["React","useState","Jumbotron","VerticalLine","Display","Button","Grid","props","layout","state","setState","switchCaseOperators","valueToCheck","valueToReturn","defaultValueToReturn","validation1","value","toString","lastCharOfState","length","fn","validation","string","buttons","button","onClickEqual","onClickDelete","map"],"mappings":"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","sourcesContent":["import React, {\r\n    useState\r\n} \r\nfrom 'react';\r\n\r\nimport {\r\n    Jumbotron,\r\n    VerticalLine,\r\n    Display,\r\n    Button,\r\n    Grid\r\n}\r\nfrom \"./bootstrap\";\r\n\r\nexport default props => {\r\n    const layout = [\r\n        7,  8,   9,  \"/\",\r\n        4,  5,   6,  \"X\",\r\n        1,  2,   3,  \"-\",\r\n        0, \".\", \"=\", \"+\"\r\n    ];\r\n\r\n    let [state, setState] = useState(\"\"); \r\n\r\n    const switchCaseOperators = ({valueToCheck, valueToReturn, defaultValueToReturn}) => {\r\n        switch(valueToCheck){\r\n            case \"/\":\r\n            case \"X\":\r\n            case \"-\":\r\n            case \"+\":\r\n                return valueToReturn;\r\n            default:\r\n                return defaultValueToReturn;\r\n        }\r\n    }\r\n\r\n    const validation1 = value => {\r\n        value = value.toString();\r\n\r\n        let lastCharOfState = state[state.length - 1];\r\n\r\n        if (!lastCharOfState && !(value === \".\")) {\r\n            return switchCaseOperators({\r\n                valueToCheck: value, \r\n                valueToReturn: \"\",\r\n                defaultValueToReturn: value\r\n            })\r\n        }\r\n\r\n        return switchCaseOperators({\r\n            valueToCheck: lastCharOfState, \r\n\r\n            valueToReturn: switchCaseOperators({\r\n                valueToCheck: value, \r\n\r\n                valueToReturn: \"\",\r\n\r\n                defaultValueToReturn: value\r\n            }),\r\n\r\n            defaultValueToReturn: value\r\n        })\r\n\r\n    }\r\n\r\n    const fn = value => {\r\n        value = validation(value);\r\n\r\n        let string = `${state}${value}`;\r\n\r\n        string = `${state}${value}`;\r\n\r\n        setState(string);\r\n    }\r\n\r\n    const buttons = value => {\r\n        let button;\r\n\r\n        if (!(value === \"=\")) {\r\n            button = <Button onClick={() => fn(value)} key={value} name={value}/>;\r\n        }\r\n\r\n        else {\r\n            button = <Button onClick={props.onClickEqual} key={value} name={value}/>\r\n        }\r\n\r\n        return button;\r\n    }\r\n\r\n    return (\r\n        <Jumbotron width=\"30rem\" center>\r\n            <Display text={state}>\r\n                <Button onClick={props.onClickDelete} name=\"AC\"/>\r\n            </Display>\r\n            \r\n            <VerticalLine/>    \r\n            \r\n            <Grid columns={4}>\r\n                {layout.map(buttons)}\r\n            </Grid>\r\n        </Jumbotron>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}