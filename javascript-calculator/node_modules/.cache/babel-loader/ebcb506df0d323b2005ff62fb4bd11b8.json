{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yousefs_Dator\\\\Desktop\\\\freecodecamp\\\\frontend\\\\javascript-calculator\\\\src\\\\components\\\\calculator.js\";\nimport React, { useState } from 'react';\nimport { Jumbotron, VerticalLine, Display, Button, Grid } from \"./bootstrap\";\nimport { getLastItem, getFirstItem } from \"../utilities\";\nexport default (function (props) {\n  var layout = [7, 8, 9, \"/\", 4, 5, 6, \"X\", 1, 2, 3, \"-\", 0, \".\", \"=\", \"+\"];\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var isValueValidatedWith = function isValueValidatedWith(value, checkValues) {\n    var bool = false;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = checkValues[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var checkValue = _step.value;\n        bool = bool || checkValue === value;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return bool;\n  };\n\n  var specialCharValidation = function specialCharValidation(value) {\n    //Validate chars \"/\", \"X\", \"-\", \"+\"\n    var lastCharOfState = getLastItem(state);\n    var specialChars = [\"/\", \"X\", \"-\", \"+\"];\n    var isLastCharSpecial = isValueValidatedWith(lastCharOfState, specialChars);\n    var isValueCharSpecial = isValueValidatedWith(value, specialChars);\n    var validated = value;\n\n    if (isLastCharSpecial && isValueCharSpecial) {\n      validated = \"\";\n    }\n\n    return validated;\n  };\n\n  var zeroCharValidation = function zeroCharValidation(value) {\n    var lastCharOfState = getLastItem(state);\n    var firstCharOfState = getFirstItem(state);\n    var specialChar = \"0\";\n    console.log(\"\".concat(getFirstItem, \" == \").concat(getLastItem));\n\n    if (firstCharOfState == lastCharOfState) {\n      console.log(\"abra\");\n    }\n  };\n\n  var changeState = function changeState(value) {\n    var string = \"\".concat(state).concat(validatedValue);\n    string = \"\".concat(state).concat(validatedValue);\n    setState(string);\n  };\n\n  var buttons = function buttons(value) {\n    var button;\n\n    if (!(value === \"=\")) {\n      button = React.createElement(Button, {\n        onClick: function onClick() {\n          return changeState(value);\n        },\n        key: value,\n        name: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    } else {\n      button = React.createElement(Button, {\n        onClick: props.onClickEqual,\n        key: value,\n        name: value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    }\n\n    return button;\n  };\n\n  return React.createElement(Jumbotron, {\n    width: \"30rem\",\n    center: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Display, {\n    text: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: props.onClickDelete,\n    name: \"AC\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(VerticalLine, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    columns: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, layout.map(buttons)));\n});","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\javascript-calculator\\src\\components\\calculator.js"],"names":["React","useState","Jumbotron","VerticalLine","Display","Button","Grid","getLastItem","getFirstItem","props","layout","state","setState","isValueValidatedWith","value","checkValues","bool","checkValue","specialCharValidation","lastCharOfState","specialChars","isLastCharSpecial","isValueCharSpecial","validated","zeroCharValidation","firstCharOfState","specialChar","console","log","changeState","string","validatedValue","buttons","button","onClickEqual","onClickDelete","map"],"mappings":"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","sourcesContent":["import React, {\r\n    useState\r\n} \r\nfrom 'react';\r\n\r\nimport {\r\n    Jumbotron,\r\n    VerticalLine,\r\n    Display,\r\n    Button,\r\n    Grid\r\n}\r\nfrom \"./bootstrap\";\r\n\r\nimport {\r\n    getLastItem,\r\n    getFirstItem\r\n}\r\nfrom \"../utilities\";\r\n\r\nexport default props => {\r\n    const layout = [\r\n        7,  8,   9,  \"/\",\r\n        4,  5,   6,  \"X\",\r\n        1,  2,   3,  \"-\",\r\n        0, \".\", \"=\", \"+\"\r\n    ];\r\n\r\n    let [state, setState] = useState(\"\"); \r\n\r\n    const isValueValidatedWith = (value, checkValues) => {\r\n        let bool = false;\r\n\r\n        for (const checkValue of checkValues) {\r\n            bool = bool || (checkValue === value);\r\n        }\r\n\r\n        return bool\r\n    }\r\n\r\n    const specialCharValidation = value => {\r\n        \r\n        //Validate chars \"/\", \"X\", \"-\", \"+\"\r\n        const lastCharOfState = getLastItem(state);\r\n        \r\n        const specialChars = [\"/\", \"X\", \"-\", \"+\"];\r\n\r\n        const isLastCharSpecial = isValueValidatedWith(lastCharOfState, specialChars);\r\n\r\n        const isValueCharSpecial = isValueValidatedWith(value, specialChars);\r\n\r\n        let validated = value;\r\n\r\n        if (isLastCharSpecial && isValueCharSpecial) {\r\n            validated = \"\";\r\n        }\r\n\r\n        return validated;\r\n    }\r\n\r\n    const zeroCharValidation = value => {\r\n        const lastCharOfState = getLastItem(state);\r\n        \r\n        const firstCharOfState = getFirstItem(state);\r\n        \r\n        const specialChar = \"0\";\r\n\r\n        console.log(`${getFirstItem} == ${getLastItem}`);\r\n\r\n        if (firstCharOfState == lastCharOfState) {\r\n            \r\n            console.log(\"abra\");\r\n        }\r\n    }\r\n\r\n    const changeState = value => {\r\n        let string = `${state}${validatedValue}`;\r\n\r\n        string = `${state}${validatedValue}`;\r\n\r\n        setState(string);\r\n    }\r\n\r\n    const buttons = value => {\r\n        let button;\r\n\r\n        if (!(value === \"=\")) {\r\n            button = <Button onClick={() => changeState(value)} key={value} name={value}/>;\r\n        }\r\n\r\n        else {\r\n            button = <Button onClick={props.onClickEqual} key={value} name={value}/>\r\n        }\r\n\r\n        return button;\r\n    }\r\n\r\n    return (\r\n        <Jumbotron width=\"30rem\" center>\r\n            <Display text={state}>\r\n                <Button onClick={props.onClickDelete} name=\"AC\"/>\r\n            </Display>\r\n            \r\n            <VerticalLine/>    \r\n            \r\n            <Grid columns={4}>\r\n                {layout.map(buttons)}\r\n            </Grid>\r\n        </Jumbotron>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}