{"ast":null,"code":"import { onAddChar, onDelete, onEqual, onAddMath, onSubtractMath, onDivideMath, onMultipleMath } from \"./actions.js\";\nimport { concatObjects, copyObject } from \"../utilities\";\nimport { stat } from \"fs\";\nimport { parse } from \"path\";\nvar initState = {\n  displayString: \"\",\n  calcString: \"\",\n  value: 0,\n  isCalc: false,\n  usedOperator: \"\"\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case onDelete.getName:\n      return copyObject(initState);\n\n    case onEqual.getName:\n      return concatObjects(state, {\n        displayString: \"\".concat(state.displayString, \"=\").concat(state.value + parseFloat(state.calcString)),\n        calcString: \"\".concat(mathOperator(state.usedOperator, state.value, state.calcString)),\n        //mathOperator(\"+\", state.value, state.calcString)\n        value: 0,\n        isCalc: true\n      });\n\n    case onAddChar.getName:\n      return concatObjects(state, {\n        calcString: state.calcString + calcStringValidation(action.char),\n        displayString: \"\".concat(state.displayString).concat(action.char)\n      });\n\n    case onAddMath.getName:\n      return concatObjects(state, {\n        calcString: \"\",\n        value: mathOperator(\"+\", state.value, state.calcString),\n        usedOperator: \"+\"\n      });\n\n    default:\n      return state;\n  }\n});\n\nfunction calcStringValidation(char) {\n  switch (char) {\n    case \"-\":\n    case \"+\":\n    case \"/\":\n    case \"X\":\n      return \"\";\n\n    default:\n      return char;\n  }\n}\n\nfunction mathOperator(type, a, b) {\n  a = parseFloat(a);\n  b = parseFloat(a);\n  console.log(a, b);\n\n  switch (type) {\n    case \"+\":\n      return a + b;\n\n    case \"-\":\n      return a - b;\n\n    case \"/\":\n      return a / b;\n\n    case \"X\":\n      return a * b;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\javascript-calculator\\src\\store\\reducer.js"],"names":["onAddChar","onDelete","onEqual","onAddMath","onSubtractMath","onDivideMath","onMultipleMath","concatObjects","copyObject","stat","parse","initState","displayString","calcString","value","isCalc","usedOperator","state","action","type","getName","parseFloat","mathOperator","calcStringValidation","char","a","b","console","log"],"mappings":"AAAA,SACIA,SADJ,EAEIC,QAFJ,EAGIC,OAHJ,EAIIC,SAJJ,EAKIC,cALJ,EAMIC,YANJ,EAOIC,cAPJ,QASK,cATL;AAWA,SACIC,aADJ,EAEIC,UAFJ,QAIK,cAJL;AAKA,SAASC,IAAT,QAAqB,IAArB;AACA,SAASC,KAAT,QAAsB,MAAtB;AAEA,IAAMC,SAAS,GAAG;AACdC,EAAAA,aAAa,EAAE,EADD;AAEdC,EAAAA,UAAU,EAAE,EAFE;AAGdC,EAAAA,KAAK,EAAE,CAHO;AAIdC,EAAAA,MAAM,EAAE,KAJM;AAKdC,EAAAA,YAAY,EAAE;AALA,CAAlB;AAQA,gBAAe,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBN,SAAsB;AAAA,MAAXO,MAAW;;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKlB,QAAQ,CAACmB,OAAd;AACI,aAAOZ,UAAU,CAACG,SAAD,CAAjB;;AAEJ,SAAKT,OAAO,CAACkB,OAAb;AACI,aAAOb,aAAa,CAACU,KAAD,EAAQ;AACxBL,QAAAA,aAAa,YAAKK,KAAK,CAACL,aAAX,cAA4BK,KAAK,CAACH,KAAN,GAAcO,UAAU,CAACJ,KAAK,CAACJ,UAAP,CAApD,CADW;AAExBA,QAAAA,UAAU,YAAKS,YAAY,CAACL,KAAK,CAACD,YAAP,EAAqBC,KAAK,CAACH,KAA3B,EAAkCG,KAAK,CAACJ,UAAxC,CAAjB,CAFc;AAGxB;AACAC,QAAAA,KAAK,EAAE,CAJiB;AAKxBC,QAAAA,MAAM,EAAE;AALgB,OAAR,CAApB;;AAQJ,SAAKf,SAAS,CAACoB,OAAf;AACI,aAAOb,aAAa,CAACU,KAAD,EAAQ;AACxBJ,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,GAAmBU,oBAAoB,CAACL,MAAM,CAACM,IAAR,CAD3B;AAExBZ,QAAAA,aAAa,YAAKK,KAAK,CAACL,aAAX,SAA2BM,MAAM,CAACM,IAAlC;AAFW,OAAR,CAApB;;AAKJ,SAAKrB,SAAS,CAACiB,OAAf;AACI,aAAOb,aAAa,CAACU,KAAD,EAAQ;AACxBJ,QAAAA,UAAU,EAAE,EADY;AAExBC,QAAAA,KAAK,EAAEQ,YAAY,CAAC,GAAD,EAAML,KAAK,CAACH,KAAZ,EAAmBG,KAAK,CAACJ,UAAzB,CAFK;AAGxBG,QAAAA,YAAY,EAAE;AAHU,OAAR,CAApB;;AAOJ;AACI,aAAOC,KAAP;AA5BR;AA8BH,CA/BD;;AAiCA,SAASM,oBAAT,CAA8BC,IAA9B,EAAoC;AAChC,UAAOA,IAAP;AACI,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACI,aAAO,EAAP;;AACJ;AACI,aAAOA,IAAP;AAPR;AASH;;AAED,SAASF,YAAT,CAAsBH,IAAtB,EAA4BM,CAA5B,EAA+BC,CAA/B,EAAkC;AAC9BD,EAAAA,CAAC,GAAGJ,UAAU,CAACI,CAAD,CAAd;AACAC,EAAAA,CAAC,GAAGL,UAAU,CAACI,CAAD,CAAd;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ,EAAeC,CAAf;;AAEA,UAAOP,IAAP;AACI,SAAK,GAAL;AACI,aAAOM,CAAC,GAAGC,CAAX;;AAEJ,SAAK,GAAL;AACI,aAAOD,CAAC,GAAGC,CAAX;;AAEJ,SAAK,GAAL;AACI,aAAOD,CAAC,GAAGC,CAAX;;AAEJ,SAAK,GAAL;AACI,aAAOD,CAAC,GAAGC,CAAX;AAXR;AAaH","sourcesContent":["import {\r\n    onAddChar,\r\n    onDelete,\r\n    onEqual,\r\n    onAddMath,\r\n    onSubtractMath,\r\n    onDivideMath,\r\n    onMultipleMath\r\n}\r\nfrom \"./actions.js\";\r\n\r\nimport {\r\n    concatObjects,\r\n    copyObject,\r\n}\r\nfrom \"../utilities\";\r\nimport { stat } from \"fs\";\r\nimport { parse } from \"path\";\r\n\r\nconst initState = {\r\n    displayString: \"\",\r\n    calcString: \"\",\r\n    value: 0,\r\n    isCalc: false,\r\n    usedOperator: \"\"\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type) {\r\n        case onDelete.getName:\r\n            return copyObject(initState);\r\n\r\n        case onEqual.getName:\r\n            return concatObjects(state, {\r\n                displayString: `${state.displayString}=${state.value + parseFloat(state.calcString)}`,\r\n                calcString: `${mathOperator(state.usedOperator, state.value, state.calcString)}`,\r\n                //mathOperator(\"+\", state.value, state.calcString)\r\n                value: 0,\r\n                isCalc: true\r\n            })\r\n\r\n        case onAddChar.getName: \r\n            return concatObjects(state, {\r\n                calcString: state.calcString + calcStringValidation(action.char),\r\n                displayString: `${state.displayString}${action.char}`\r\n            });\r\n\r\n        case onAddMath.getName:\r\n            return concatObjects(state, {\r\n                calcString: \"\",\r\n                value: mathOperator(\"+\", state.value, state.calcString),\r\n                usedOperator: \"+\"\r\n            });\r\n\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction calcStringValidation(char) {\r\n    switch(char) {\r\n        case \"-\":\r\n        case \"+\":\r\n        case \"/\":\r\n        case \"X\":\r\n            return \"\"\r\n        default:\r\n            return char;\r\n    }\r\n}\r\n\r\nfunction mathOperator(type, a, b) {\r\n    a = parseFloat(a);\r\n    b = parseFloat(a)\r\n\r\n    console.log(a, b)\r\n\r\n    switch(type) {\r\n        case \"+\":\r\n            return a + b;\r\n            \r\n        case \"-\":\r\n            return a - b;\r\n\r\n        case \"/\":\r\n            return a / b;\r\n\r\n        case \"X\":\r\n            return a * b;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}