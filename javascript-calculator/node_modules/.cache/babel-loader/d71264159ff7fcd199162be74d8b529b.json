{"ast":null,"code":"import { onAddChar, onDelete, onEqual, onAddMath, onSubtractMath, //onDivideMath,\nonMultipleMath } from \"./actions.js\";\nimport { concatObjects, copyObject } from \"../utilities\";\nvar initState = {\n  displayString: \"\",\n  calcString: \"\",\n  value: 0,\n  isCalc: false,\n  usedOperator: \"\"\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case onDelete.getName:\n      return copyObject(initState);\n\n    case onEqual.getName:\n      if (state.calcString) {\n        return concatObjects(initState, {\n          displayString: \"\".concat(mathOperator(state.usedOperator, state.value, state.calcString)),\n          calcString: \"\".concat(mathOperator(state.usedOperator, state.value, state.calcString))\n        });\n      }\n\n    case onAddChar.getName:\n      return concatObjects(state, {\n        calcString: state.calcString + calcStringValidation(action.char),\n        displayString: \"\".concat(state.displayString).concat(action.char)\n      });\n\n    case onAddMath.getName:\n      return a(\"+\", state);\n\n    case onMultipleMath.getName:\n      return a(\"*\", state);\n\n    case onSubtractMath.getName:\n      return a(\"-\", state);\n\n    default:\n      return state;\n  }\n});\n\nfunction calcStringValidation(char) {\n  switch (char) {\n    case \"-\":\n    case \"+\":\n    case \"/\":\n    case \"X\":\n      return \"\";\n\n    default:\n      return char;\n  }\n}\n\nfunction mathOperator(type, a, b) {\n  a = parseFloat(a);\n  b = parseFloat(b);\n  console.log(a, b);\n  var temp;\n\n  switch (type) {\n    case \"+\":\n      return a + b;\n\n    case \"-\":\n      if (a === 0) {\n        temp = b;\n        b = a;\n        a = b;\n        console.log(a, b);\n      }\n\n      return a - b;\n\n    case \"/\":\n      return a / b;\n\n    case \"*\":\n      a = a === 0 ? 1 : a;\n      b = b === 0 ? b : b;\n      return a * b;\n\n    default:\n      return 0;\n  }\n}\n\nfunction a(operator, state) {\n  return concatObjects(state, {\n    calcString: \"\",\n    value: mathOperator(operator, state.value, state.calcString),\n    usedOperator: operator\n  });\n}","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\javascript-calculator\\src\\store\\reducer.js"],"names":["onAddChar","onDelete","onEqual","onAddMath","onSubtractMath","onMultipleMath","concatObjects","copyObject","initState","displayString","calcString","value","isCalc","usedOperator","state","action","type","getName","mathOperator","calcStringValidation","char","a","b","parseFloat","console","log","temp","operator"],"mappings":"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","sourcesContent":["import {\r\n    onAddChar,\r\n    onDelete,\r\n    onEqual,\r\n    onAddMath,\r\n    onSubtractMath,\r\n    //onDivideMath,\r\n    onMultipleMath\r\n}\r\nfrom \"./actions.js\";\r\n\r\nimport {\r\n    concatObjects,\r\n    copyObject,\r\n}\r\nfrom \"../utilities\";\r\n\r\nconst initState = {\r\n    displayString: \"\",\r\n    calcString: \"\",\r\n    value: 0,\r\n    isCalc: false,\r\n    usedOperator: \"\"\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type) {\r\n        case onDelete.getName:\r\n            return copyObject(initState);\r\n\r\n        case onEqual.getName:\r\n            if (state.calcString) {\r\n                return concatObjects(initState, {\r\n                    displayString: `${\r\n                        mathOperator(state.usedOperator, state.value, state.calcString)\r\n                    }`,\r\n\r\n                    calcString: `${\r\n                        mathOperator(state.usedOperator, state.value, state.calcString)\r\n                    }`,\r\n                })\r\n            }\r\n\r\n        case onAddChar.getName: \r\n            return concatObjects(state, {\r\n                calcString: state.calcString + calcStringValidation(action.char),\r\n                displayString: `${state.displayString}${action.char}`\r\n            });\r\n\r\n        case onAddMath.getName:\r\n            return a(\"+\", state);\r\n\r\n        case onMultipleMath.getName:\r\n            return a(\"*\", state);\r\n\r\n        case onSubtractMath.getName:\r\n            return a(\"-\", state);\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction calcStringValidation(char) {\r\n    switch(char) {\r\n        case \"-\":\r\n        case \"+\":\r\n        case \"/\":\r\n        case \"X\":\r\n            return \"\"\r\n        default:\r\n            return char;\r\n    }\r\n}\r\n\r\nfunction mathOperator(type, a, b) {\r\n    a = parseFloat(a);\r\n    b = parseFloat(b)\r\n\r\n    console.log(a, b);\r\n\r\n    let temp;\r\n    switch(type) {\r\n        case \"+\":\r\n            return a + b;\r\n            \r\n        case \"-\":\r\n            if (a === 0) {\r\n                temp = b;\r\n                b = a;\r\n\r\n                a = b;\r\n\r\n                console.log(a, b);\r\n            }\r\n\r\n            return a - b;\r\n\r\n        case \"/\":\r\n            return a / b;\r\n\r\n        case \"*\":\r\n            a = a === 0? 1: a;\r\n            b = b === 0? b: b; \r\n            return a * b;\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nfunction a(operator, state) {\r\n    return concatObjects(state, {\r\n        calcString: \"\",\r\n        value: mathOperator(operator, state.value, state.calcString),\r\n        usedOperator: operator\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}