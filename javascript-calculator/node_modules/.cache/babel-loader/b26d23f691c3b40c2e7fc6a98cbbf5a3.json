{"ast":null,"code":"import { onAddChar, onDelete, onEqual, onAddMath, onSubtractMath, onDivideMath, onMultipleMath } from \"./actions.js\";\nimport { concatObjects, copyObject } from \"../utilities\";\nvar initState = {\n  displayString: \"\",\n  calcString: \"\",\n  value: 0\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case onDelete.getName:\n      return copyObject(initState);\n\n    case onEqual.getName:\n      return concatObjects(state, {\n        value: addValueWithCalcstring(),\n        calcString: \"\",\n        displayString: \"\".concat(state.displayString, \" = \").concat(addValueWithCalcstring())\n      });\n\n    case onAddChar.getName:\n      return concatObjects(state, {\n        calcString: calcStringValidation(action.char),\n        displayString: \"\".concat(state.displayString, \" \").concat(action.char)\n      });\n\n    case onAddMath.getName:\n      return concatObjects(state, {\n        calcString: \"\",\n        value: addValueWithCalcstring()\n      });\n\n    default:\n      return state;\n  }\n\n  function addValueWithCalcstring() {\n    return state.value + parseInt(state.calcString);\n  }\n});\n\nfunction calcStringValidation(char) {\n  switch (char) {\n    case \"-\":\n    case \"+\":\n    case \"/\":\n    case \"X\":\n      return \"\";\n\n    default:\n      return char;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\javascript-calculator\\src\\store\\reducer.js"],"names":["onAddChar","onDelete","onEqual","onAddMath","onSubtractMath","onDivideMath","onMultipleMath","concatObjects","copyObject","initState","displayString","calcString","value","state","action","type","getName","addValueWithCalcstring","calcStringValidation","char","parseInt"],"mappings":"AAAA,SACIA,SADJ,EAEIC,QAFJ,EAGIC,OAHJ,EAIIC,SAJJ,EAKIC,cALJ,EAMIC,YANJ,EAOIC,cAPJ,QASK,cATL;AAWA,SACIC,aADJ,EAEIC,UAFJ,QAIK,cAJL;AAMA,IAAMC,SAAS,GAAG;AACdC,EAAAA,aAAa,EAAE,EADD;AAEdC,EAAAA,UAAU,EAAE,EAFE;AAGdC,EAAAA,KAAK,EAAE;AAHO,CAAlB;AAMA,gBAAe,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBJ,SAAsB;AAAA,MAAXK,MAAW;;AAC1C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKd,QAAQ,CAACe,OAAd;AACI,aAAOR,UAAU,CAACC,SAAD,CAAjB;;AAEJ,SAAKP,OAAO,CAACc,OAAb;AACI,aAAOT,aAAa,CAACM,KAAD,EAAQ;AACxBD,QAAAA,KAAK,EAAEK,sBAAsB,EADL;AAExBN,QAAAA,UAAU,EAAE,EAFY;AAGxBD,QAAAA,aAAa,YAAKG,KAAK,CAACH,aAAX,gBAA+BO,sBAAsB,EAArD;AAHW,OAAR,CAApB;;AAMJ,SAAKjB,SAAS,CAACgB,OAAf;AACI,aAAOT,aAAa,CAACM,KAAD,EAAQ;AACxBF,QAAAA,UAAU,EAAGO,oBAAoB,CAACJ,MAAM,CAACK,IAAR,CADT;AAExBT,QAAAA,aAAa,YAAKG,KAAK,CAACH,aAAX,cAA4BI,MAAM,CAACK,IAAnC;AAFW,OAAR,CAApB;;AAKJ,SAAKhB,SAAS,CAACa,OAAf;AACI,aAAOT,aAAa,CAACM,KAAD,EAAQ;AACxBF,QAAAA,UAAU,EAAE,EADY;AAExBC,QAAAA,KAAK,EAAEK,sBAAsB;AAFL,OAAR,CAApB;;AAKJ;AACI,aAAOJ,KAAP;AAxBR;;AA2BA,WAASI,sBAAT,GAAkC;AAC9B,WAAOJ,KAAK,CAACD,KAAN,GAAcQ,QAAQ,CAACP,KAAK,CAACF,UAAP,CAA7B;AACH;AACJ,CA/BD;;AAiCA,SAASO,oBAAT,CAA8BC,IAA9B,EAAoC;AAChC,UAAOA,IAAP;AACI,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACA,SAAK,GAAL;AACI,aAAO,EAAP;;AACJ;AACI,aAAOA,IAAP;AAPR;AASH","sourcesContent":["import {\r\n    onAddChar,\r\n    onDelete,\r\n    onEqual,\r\n    onAddMath,\r\n    onSubtractMath,\r\n    onDivideMath,\r\n    onMultipleMath\r\n}\r\nfrom \"./actions.js\";\r\n\r\nimport {\r\n    concatObjects,\r\n    copyObject,\r\n}\r\nfrom \"../utilities\";\r\n\r\nconst initState = {\r\n    displayString: \"\",\r\n    calcString: \"\",\r\n    value: 0\r\n};\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type) {\r\n        case onDelete.getName:\r\n            return copyObject(initState);\r\n\r\n        case onEqual.getName:\r\n            return concatObjects(state, {\r\n                value: addValueWithCalcstring(),\r\n                calcString: \"\",\r\n                displayString: `${state.displayString} = ${(addValueWithCalcstring())}` \r\n            });\r\n\r\n        case onAddChar.getName: \r\n            return concatObjects(state, {\r\n                calcString:  calcStringValidation(action.char),\r\n                displayString: `${state.displayString} ${action.char}`\r\n            });\r\n\r\n        case onAddMath.getName:\r\n            return concatObjects(state, {\r\n                calcString: \"\",\r\n                value: addValueWithCalcstring()\r\n            });\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n\r\n    function addValueWithCalcstring() {\r\n        return state.value + parseInt(state.calcString)\r\n    }\r\n}\r\n\r\nfunction calcStringValidation(char) {\r\n    switch(char) {\r\n        case \"-\":\r\n        case \"+\":\r\n        case \"/\":\r\n        case \"X\":\r\n            return \"\"\r\n        default:\r\n            return char;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}