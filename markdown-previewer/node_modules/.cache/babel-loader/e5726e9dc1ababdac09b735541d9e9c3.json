{"ast":null,"code":"import * as utilties from \"../utilities\";\nvar addKeysToObject = utilties.addKeysToObject,\n    copyObject = utilties.copyObject,\n    objectLength = utilties.objectLength,\n    throwErrorIf = utilties.throwErrorIf,\n    concatObjects = utilties.concatObjects;\n\nvar createAction = function createAction(_ref) {\n  var name = _ref.name,\n      _ref$payload = _ref.payload,\n      payload = _ref$payload === void 0 ? [] : _ref$payload;\n  return Object.freeze({\n    getName: name,\n    getAction: function getAction(args) {\n      var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (args) {\n        return args;\n      };\n      var actionPayload = addKeysToObject({}, payload);\n      var action = addKeysToObject({\n        type: name\n      }, payload);\n      var createActionObjectPayload = JSON.stringify({\n        type: name,\n        payload: payload\n      });\n      action = assignActionPayload(action, actionPayload, args, createActionObjectPayload);\n      action = concatObjects(action, fn(action));\n      throwErrorIf({\n        boolean: !name,\n        message: \"createAction(\".concat(createActionObjectPayload, \") missing the argument \\\"name\\\"\")\n      });\n      throwErrorIf({\n        boolean: !payload,\n        message: \"createAction(\".concat(createActionObjectPayload, \") missing the argument \\\"payload\\\"\")\n      });\n      return action;\n    }\n  });\n};\n\nfunction assignActionPayload(action, actionPayload, args, createActionObjectPayload) {\n  action = copyObject(action);\n  actionPayload = copyObject(actionPayload);\n  args = copyObject(args);\n  throwErrorIf({\n    boolean: objectLength(args) === 0 && objectLength(actionPayload) !== 0,\n    message: \"createAction(\".concat(createActionObjectPayload, \").action() missing arguments\")\n  });\n\n  for (var key in args) {\n    var value = args[key];\n    var hasPayloadKey = actionPayload[key] === null;\n\n    if (hasPayloadKey) {\n      action[key] = value;\n    }\n\n    throwErrorIf({\n      boolean: !hasPayloadKey,\n      message: \"The parameter \\\"\".concat(key, \"\\\" does not exist in createAction(\").concat(createActionObjectPayload, \").action({\").concat(key, \": \").concat(value, \"})\")\n    });\n  }\n\n  return action;\n}\n\nexport { createAction };","map":{"version":3,"sources":["C:\\Users\\Yousefs_Dator\\Desktop\\freecodecamp\\frontend\\markdown-previewer\\src\\functions\\createAction.js"],"names":["utilties","addKeysToObject","copyObject","objectLength","throwErrorIf","concatObjects","createAction","name","payload","Object","freeze","getName","getAction","args","fn","actionPayload","action","type","createActionObjectPayload","JSON","stringify","assignActionPayload","boolean","message","key","value","hasPayloadKey"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,cAA1B;IAEOC,e,GAA0ED,Q,CAA1EC,e;IAAiBC,U,GAAyDF,Q,CAAzDE,U;IAAYC,Y,GAA6CH,Q,CAA7CG,Y;IAAcC,Y,GAA+BJ,Q,CAA/BI,Y;IAAcC,a,GAAiBL,Q,CAAjBK,a;;AAEhE,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,0BAAQC,OAAR;AAAA,MAAQA,OAAR,6BAAkB,EAAlB;AAAA,SAA2BC,MAAM,CAACC,MAAP,CAAc;AAC1DC,IAAAA,OAAO,EAAEJ,IADiD;AAE1DK,IAAAA,SAAS,EAAE,mBAASC,IAAT,EAAkC;AAAA,UAAnBC,EAAmB,uEAAd,UAAAD,IAAI;AAAA,eAAIA,IAAJ;AAAA,OAAU;AACzC,UAAME,aAAa,GAAGd,eAAe,CAAC,EAAD,EAAKO,OAAL,CAArC;AAEA,UAAIQ,MAAM,GAAGf,eAAe,CAAC;AAACgB,QAAAA,IAAI,EAAEV;AAAP,OAAD,EAAeC,OAAf,CAA5B;AAEA,UAAMU,yBAAyB,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACH,QAAAA,IAAI,EAAEV,IAAP;AAAaC,QAAAA,OAAO,EAAEA;AAAtB,OAAf,CAAlC;AAEAQ,MAAAA,MAAM,GAAGK,mBAAmB,CAACL,MAAD,EAASD,aAAT,EAAwBF,IAAxB,EAA8BK,yBAA9B,CAA5B;AAEAF,MAAAA,MAAM,GAAGX,aAAa,CAACW,MAAD,EAASF,EAAE,CAACE,MAAD,CAAX,CAAtB;AAEAZ,MAAAA,YAAY,CAAC;AACTkB,QAAAA,OAAO,EAAE,CAACf,IADD;AAETgB,QAAAA,OAAO,yBAAkBL,yBAAlB;AAFE,OAAD,CAAZ;AAKAd,MAAAA,YAAY,CAAC;AACTkB,QAAAA,OAAO,EAAE,CAACd,OADD;AAETe,QAAAA,OAAO,yBAAkBL,yBAAlB;AAFE,OAAD,CAAZ;AAKA,aAAOF,MAAP;AACH;AAxByD,GAAd,CAA3B;AAAA,CAArB;;AA2BA,SAASK,mBAAT,CAA6BL,MAA7B,EAAqCD,aAArC,EAAoDF,IAApD,EAA0DK,yBAA1D,EAAqF;AACjFF,EAAAA,MAAM,GAAGd,UAAU,CAACc,MAAD,CAAnB;AACAD,EAAAA,aAAa,GAAGb,UAAU,CAACa,aAAD,CAA1B;AACAF,EAAAA,IAAI,GAAGX,UAAU,CAACW,IAAD,CAAjB;AAEAT,EAAAA,YAAY,CAAC;AACTkB,IAAAA,OAAO,EAAEnB,YAAY,CAACU,IAAD,CAAZ,KAAuB,CAAvB,IAA4BV,YAAY,CAACY,aAAD,CAAZ,KAAgC,CAD5D;AAETQ,IAAAA,OAAO,yBAAkBL,yBAAlB;AAFE,GAAD,CAAZ;;AAKA,OAAK,IAAIM,GAAT,IAAgBX,IAAhB,EAAsB;AAClB,QAAMY,KAAK,GAAGZ,IAAI,CAACW,GAAD,CAAlB;AAEA,QAAME,aAAa,GAAGX,aAAa,CAACS,GAAD,CAAb,KAAuB,IAA7C;;AAEA,QAAIE,aAAJ,EAAmB;AACfV,MAAAA,MAAM,CAACQ,GAAD,CAAN,GAAcC,KAAd;AACH;;AAEDrB,IAAAA,YAAY,CAAC;AACTkB,MAAAA,OAAO,EAAE,CAACI,aADD;AAETH,MAAAA,OAAO,4BAAoBC,GAApB,+CAA2DN,yBAA3D,uBAAiGM,GAAjG,eAAyGC,KAAzG;AAFE,KAAD,CAAZ;AAIH;;AAED,SAAOT,MAAP;AACH;;AAED,SAAQV,YAAR","sourcesContent":["import * as utilties from \"../utilities\";\r\n\r\nconst {addKeysToObject, copyObject, objectLength, throwErrorIf, concatObjects} = utilties;\r\n\r\nconst createAction = ({name, payload = []}) => (Object.freeze({\r\n    getName: name,\r\n    getAction: function(args, fn = args => args) {\r\n        const actionPayload = addKeysToObject({}, payload);\r\n    \r\n        let action = addKeysToObject({type: name}, payload);\r\n    \r\n        const createActionObjectPayload = JSON.stringify({type: name, payload: payload});\r\n    \r\n        action = assignActionPayload(action, actionPayload, args, createActionObjectPayload);\r\n    \r\n        action = concatObjects(action, fn(action));\r\n    \r\n        throwErrorIf({\r\n            boolean: !name,\r\n            message: `createAction(${createActionObjectPayload}) missing the argument \"name\"`\r\n        })\r\n    \r\n        throwErrorIf({\r\n            boolean: !payload,\r\n            message: `createAction(${createActionObjectPayload}) missing the argument \"payload\"`\r\n        })\r\n    \r\n        return action;\r\n    }\r\n}));\r\n\r\nfunction assignActionPayload(action, actionPayload, args, createActionObjectPayload) {\r\n    action = copyObject(action);\r\n    actionPayload = copyObject(actionPayload);\r\n    args = copyObject(args);\r\n \r\n    throwErrorIf({\r\n        boolean: objectLength(args) === 0 && objectLength(actionPayload) !== 0,\r\n        message: `createAction(${createActionObjectPayload}).action() missing arguments`\r\n    })\r\n   \r\n    for (let key in args) {\r\n        const value = args[key];\r\n       \r\n        const hasPayloadKey = actionPayload[key] === null;\r\n \r\n        if (hasPayloadKey) {\r\n            action[key] = value\r\n        }\r\n \r\n        throwErrorIf({\r\n            boolean: !hasPayloadKey,\r\n            message: `The parameter \"${key}\" does not exist in createAction(${createActionObjectPayload}).action({${key}: ${value}})`\r\n        })\r\n    }\r\n \r\n    return action;\r\n}\r\n\r\nexport {createAction};"]},"metadata":{},"sourceType":"module"}